#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start testing."
set TransRate 0
set Throughput 0
set case_num 0
set timeout 10

set test_time 10
set serverip 192.168.0.175
set spi_net_ip 192.168.0.51

expect -re "Link is Up.*Full"

set timeout 10
incr case_num
send "ifconfig eth0 down\r"
while 1 {
    expect {
        -re "Down" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "Fail: disable network\n"
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
send "ifconfig eth1 $spi_net_ip\r"
while 1 {
    expect {
        -re "multicast mode" {
            case_pass $case_num
            break
        }
        -re "ifconfig:.*$kernel_prompt" {
            send_user "Fail: config spi network\n"
            case_fail $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

expect "duplex"

set timeout 5
incr case_num
send "ifconfig eth1\r"
while 1 {
    expect {
        -re "$spi_net_ip.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

step "Untar netperf."
cd $uclinux_path/testsuites/ethernet/
exec tar zxvf netperf.tar.gz

spawn /bin/sh
set netserver_id $spawn_id
expect -re $sh_prompt

set timeout 20
incr case_num
send -s "sudo ./netserver_x86\r"
while 1 {
    expect {
        -re "\[Pp\]assword" {
            send -s "$password\r"
            continue
        }
        -re "Starting netserver.*$sh_prompt" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send -s "ps aux| grep netserver_x86 | head -1\r"
while 1 {
    expect {
        -re "netserver.*$sh_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $kermit_spawn_id

set timeout 5
expect -re $kernel_prompt

set timeout 2000
incr case_num
send "netperf -H $serverip -t TCP_RR -l $test_time > netperf_tcp_rr\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            break
        }
    }
}

set timeout 2000
incr case_num
send "netperf -H $serverip -t TCP_STREAM -l $test_time > netperf_tcp_stream\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            break
        }
    }
}

set spawn_id $netserver_id
set timeout 3
expect -re $sh_prompt

send -s "sudo pkill netserver_x86\r"
while 1 {
    expect {
        -re "\[Pp\]assword" {
            send -s "$password\r"
            continue
        }
        -re $sh_prompt {
            break
        }
        timeout {
            break
        }
    }
}

set spawn_id $kermit_spawn_id

send "cat netperf_tcp_rr\r"
set timeout 10
while 1 {
    expect {
        -re "$test_time\\\.\[0-9]{2} +(\[0-9]+\\\.\[0-9]{2})" {
            set TransRate $expect_out(1,string)
            expect -re $kernel_prompt
            send_log "TransRate $expect_out(1,string)\n"
            break
        }

        timeout {
            case_fail $case_num
            break
        }
    }
}

send "cat netperf_tcp_stream\r"
set timeout 10
while 1 {
    expect {
        -re "$test_time\\\.\[0-9]{2} +(\[0-9]+\\\.\[0-9]{2})" {
            set Throughput $expect_out(1,string)
            expect -re $kernel_prompt
            send_log "Throughput $expect_out(1,string)\n"
            break
        }
        timeout {
            case_fail $case_num
            break
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
