#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

#send_log "\n\n#### Set config under $uclinux_path/linux-2.6.x folder.\n\n"

#cd $uclinux_path/linux-2.6.x
#sleep 3
# set timeout 2
#      spawn ex .config
#      expect {
#         "Entering Ex mode*Normal mode." { }

#         "already exists!" {
#            send "e\r"
#            sleep 1
#         }
#      }
#      sleep 1
#      send "/CONFIG_BFIN_KERNEL_CLOCK is not set\r"
#      expect "CONFIG_BFIN_KERNEL_CLOCK is not set"
#      send "d\r"
#      sleep .5
#      expect ":"
#      send "i\r"
#      sleep .5
#      send "CONFIG_BFIN_KERNEL_CLOCK=y\r"
#      send "CONFIG_VCO_MULT=20\r"
#      send "CONFIG_CCLK_DIV=1\r"
#      send "CONFIG_SCLK_DIV=8\r"
#      send ".\r"
#      expect ":"
#      sleep .5    

#      send "wq\r"
#      expect eof


cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
    expect {

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Re-program Clocks while Kernel boots.*BFIN_KERNEL_CLOCK.*\\\[././.]" {
            send "Y\r"
        }

        -re "VCO Multiplier \\\(VCO_MULT\\\) \\\[.*]" {
            send "20\r"
        }

        -re "Core Clock Divider.*choice\\\[1-4\\\?]\\\:" {
            send "1\r"
        }

        -re "System Clock Divider \\\(SCLK_DIV\\\) \\\[.*]" {
            send "8\r"
        }

        -re "PCCard \\\(PCMCIA/CardBus\\\) support.*PCCARD.*\\\[./././.]" {
            send "y\r"
        }

        -re "16-bit PCMCIA support.*PCMCIA.*\\\[./././.]" {
            send "y\r"
        }

        -re "Load CIS updates from userspace.*PCMCIA_LOAD_CIS.*\\\[././.]" {
            send "y\r"
        }

        -re "PCMCIA control ioctl.*PCMCIA_IOCTL.*\\\[././.]" {
            send "y\r"
        }

        -re "Blackfin CompactFlash PCMCIA Driver.*BFIN_CFPCMCIA.*\\\[./././.]" {
            send "y\r"
        }

        -re "Bank 3.*\\\(BANK_3\\\).*\\\[.*]" {
            send -s "0xFFC3\r"
        }

#       -re "Wireless LAN drivers.*non-hamradio.*Wireless Extensions.*NET_RADIO.*\\\[.*]" {
#             send "Y\r"
#      }

        -re "Wireless LAN.*IEEE 802.11.*WLAN_80211.*\\\[.*]" {
            send "y\r"
        }

        -re "Hermes chipset 802.11b support.*Orinoco.Prism2.Symbol.*HERMES.*\\\[.*]" {
            send "m\r"
        }

        -re "Hermes PCMCIA card support.*PCMCIA_HERMES.*\\\[.*]" {
            send "m\r"
        }

#      -re "Blackfin WLAN card support.*WLAN_BLACKFIN.*\\\[.*]" {
#             send "Y\r"
#      }

        -re "netperf.*USER_NETPERF_NETPERF.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "netserver.*USER_NETPERF_NETSERVER.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "wireless_tools support.*USER_WIRELESS_TOOLS.*\\\[.*]" {
            send "Y\r"
        }

        -re "iwconfig.*USER_WIRELESS_TOOLS_IWCONFIG.*\\\[.*]" {
            send "Y\r"
        }

        -re "iwgetid.*USER_WIRELESS_TOOLS_IWGETID.*\\\[.*]" {
            send "Y\r"
        }

        -re "iwlist.*USER_WIRELESS_TOOLS_IWLIST.*\\\[.*]" {
            send "Y\r"
        }

        -re "iwpriv.*USER_WIRELESS_TOOLS_IWPRIV.*\\\[.*]" {
            send "Y\r"
        }

        -re "iwspy.*USER_WIRELESS_TOOLS_IWSPY.*\\\[.*]" {
            send "Y\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            #avoid GPIO confliction with ad1836
            send "n\r"
        }

        "\\\(*) \\\[*]" {
            sleep .1
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp


cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp

send_user "Ending $argv0\n"
log_file
