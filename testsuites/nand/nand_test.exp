#!/usr/bin/expect

source ../kernel_config.exp
source ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

set nand_rootfs_num         "x"
set TEST_PASS               "pass"
set TEST_FAIL               "fail"

set case_num 0

step "Locate the partition."
incr case_num

send -s "dmesg \r"
while 1 {
    expect {

        -nocase -re "\".*NAND.*\".*(0x\[0-9a-fA-F]+-0x\[0-9a-fA-F]+)\[\x20\t]+:\[\x20\t]+\"(.*)\"\r\n(0x\[0-9a-fA-F]+-0x\[0-9a-fA-F]+)\[\x20\t]+:\[\x20\t]+\"(.*)\"\r\n" {
                set kernel_partition_address $expect_out(1,string)
                set kernel_partition_name $expect_out(2,string)
                set rootfs_partition_address $expect_out(3,string)
                set rootfs_partition_name $expect_out(4,string)
                case_pass $case_num
                expect ">"
                break;
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}

step "Show file systems."
incr case_num

send -s "cat /proc/filesystems \r"
while 1 {
    expect {

        -re "ubifs" {
                case_pass $case_num
		expect ">"
                break;
        }

        timeout {
                case_fail $case_num
		exit
        }
    }
}

incr case_num

step "MTD test"

set list [ split $rootfs_partition_name "" ]
if { [ lsearch  $list "(" ] > 0 } {
set i [ lsearch  $list "(" ]
set list2  [ linsert  $list $i "\\" ]
set j [ lsearch  $list2 ")" ]
set list3 [ linsert  $list2 $j "\\" ]
set rootfs_partition_name [ join $list3 "" ]
puts "Rootfs_partition_name is $rootfs_partition_name."
} else {
set rootfs_partition_name [ join $list "" ]
}

set timeout 5
set mtd_temp_result $TEST_FAIL
set mtd_result $TEST_FAIL
#send -s "\r"
send -s "cat /proc/mtd \r"
while 1 {
    expect {

       -re  "mtd(\[0-9]):\[0-9a-fA-F ]+\"$rootfs_partition_name\"" {
                set nand_rootfs_num $expect_out(1,string)
		set mtd_temp_result $TEST_PASS
                case_pass $case_num
                send_user "Nand_rootfs_num is $nand_rootfs_num\n"
                expect -re $kernel_prompt
                break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}
sleep 1
if { $nand_rootfs_num == "x" } {
exit
}

incr case_num

step "Detect UBI "
set timeout 80
send -s "ubinfo\r"
while 1 {
    expect {
	
	 -re "UBI control device major/minor.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}
incr case_num

step "Format MTD "
set timeout 500
send -s "ubiformat /dev/mtd$nand_rootfs_num -s 512 -O 512 \r"
while 1 {
    expect {
	
	 -re "ubiformat: formatting eraseblock .* complete.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

incr case_num
step "Attach MTD "
set timeout 180
send -s "ubiattach /dev/ubi_ctrl -m $nand_rootfs_num \r"
while 1 {
    expect {
	
	 -re "UBI device number 0.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

incr case_num
step "Make volume "
set timeout 180
send -s "ubimkvol /dev/ubi0 -s 20MiB -N ubifs0 \r"
while 1 {
    expect {
	
	 -re "Volume ID 0.*ubifs0.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

incr case_num
set timeout 180
send -s "cat /proc/mtd \r"
while 1 {
    expect {
	
	 -re "ubifs0.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}
step "Touch file"

send_log " \n1)create file system directory\n"
send -s "mkdir -p rootfs\r"
expect  -re $kernel_prompt
send_log " \n2)create test file\n"
send -s "echo This is test for mtd driver > rootfs/test\r"
expect  -re $kernel_prompt

incr case_num

step "Reading MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 200
send -s "mount -t ubifs ubi0:ubifs0 /mnt\n"
while 1 {
    expect {
        -re "UBIFS: mounted UBI device.*$kernel_prompt" {
                set mtd_temp_result $TEST_PASS
                case_pass $case_num
		break
        }

       "failed" {
                case_fail $case_num
                exit
        }
        timeout {
                case_fail $case_num
		exit
        }
    }
}
   
step "cp pwd to FS."
incr case_num

set timeout 60
send -s "cp /bin/pwd /mnt\r"
while 1 {
    expect {
         -re $kernel_prompt {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
		exit
        }
    }
}

sleep 1

step "Validating data integrity"
incr case_num

set timeout 60
send "while \[ 1 \]; do md5sum /mnt/pwd ; done\r"
while 1 {
   expect {
      -re "\[0-9a-z]+  /mnt/pwd" {
                sleep 3
                send "\3"
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
		exit
         }
     }
}

expect ">"
puts "Writing ......\n"

incr case_num
set timeout 60
send -s "cp /rootfs/test /mnt\r"
while 1 {
    expect {

       -re $kernel_prompt {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
		exit
        }
    }
}

incr case_num

step "Verify "
set timeout 2
send -s "cmp /rootfs/test /mnt/test\r"
while 1 {
    expect {
	
	"differ" {
                case_fail $case_num
		exit
	}
	timeout {
		set mtd_results $TEST_PASS
                case_pass $case_num
		break
	}
    }
}
set timeout 20

incr case_num
send -s "umount /mnt\r"
while 1 {
    expect {

        -re "UBIFS: un-mount UBI device.*$kernel_prompt" {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}
incr case_num
set timeout 2
send -s "ls /mnt\r"
while 1 {
    expect {

        "test" {
                case_fail $case_num
                exit
        }

        timeout {
                case_pass $case_num
                break
        }
    }
}

expect -re "$kernel_prompt"

set timeout 10
step "Copy rootfs.ubifs to target board\n"
spawn rcp $uclinux_path/images/rootfs.ubifs root@$targetip:/
while 1 {
   expect {

      "*connect*" {
         send_log "\nCopy to target board failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nCopy to target board done\n"
         break
      }

      timeout {
         break
      }
   }
}
set spawn_id $kermit_spawn_id

incr case_num
step "Make volume "
set timeout 180
send -s "ubimkvol /dev/ubi0 -s 20MiB -N ubifs1 \r"
while 1 {
    expect {
	
	 -re "Volume ID .*ubifs.*$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}

incr case_num
step "Make volume "
set timeout 180
send -s "ubiupdatevol /dev/ubi0_1 rootfs.ubifs \r"
while 1 {
    expect {
	
	 -re "$kernel_prompt" {
                case_pass $case_num
		break
	}

	timeout {
                case_fail $case_num
		exit
	}
    }
}
incr case_num

step "Reading MTD "	
set mtd_temp_result $TEST_FAIL
set timeout 200
send -s "mount -t ubifs ubi0:ubifs1 /mnt\n"
while 1 {
    expect {
        -re "UBIFS: mounted UBI device.*$kernel_prompt" {
                set mtd_temp_result $TEST_PASS
                case_pass $case_num
		break
        }

       "failed" {
                case_fail $case_num
                exit
        }
        timeout {
                case_fail $case_num
		exit
        }
    }
}
incr case_num
send -s "ls /mnt\r"
while 1 {
    expect {

       -re "sys.*var" {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}
incr case_num
set timeout 20
send -s "umount /mnt\r"
while 1 {
    expect {

        -re "UBIFS: un-mount.*$kernel_prompt" {
                case_pass $case_num
                break
        }

        timeout {
                case_fail $case_num
                exit
        }
    }
}
incr case_num
set timeout 60
expect  -re $kernel_prompt
send -s "ubidetach /dev/ubi_ctrl -m $nand_rootfs_num\r"
while 1 {
    expect {

       -re "UBI:.* is detached from ubi.*$kernel_prompt" {
                break
        }

       "failed" {
                case_fail $case_num
                exit
        }

        timeout {
                case_fail $case_num
		exit
        }
    }
}
send_user "\n #######################################################################################################\n"
incr case_num
step "Reboot the kernel."
set boot_image vmImage
set bootargs             $bootargs_param8
source ../reboot_kernel.exp

set timeout 5
send -s "dmesg\r"
while 1 {
   expect {
        -re "Mounted root \\\(ubifs filesystem\\\).*$kernel_prompt" {
                case_pass $case_num
                break
        }

         timeout {
                case_fail $case_num
                exit
         }
   }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file
 
