#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path/testsuites
source  make_mtd_config.exp

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
    expect {
        -re  "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Initial RAM filesystem and RAM disk.*initramfs/initrd.*support.*BLK_DEV_INITRD.*\\\[.*]" {
            send "Y\r"
        }

        -re "NAND Device Support.*MTD_NAND.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Blackfin on-chip NAND Flash Controller driver.*MTD_NAND_BF5XX.*\\\[.*]" {
        
             if { $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT" || $board_type == "BF526-EZBRD" } {
                        send -s "Y\r"
             } else {
                        send -s "\r"
             }
        }

        -re "Blackfin on-chip MAC support.*BFIN_MAC.*\\\[.*]" {

             if { $board_type == "BF527-EZKIT" || $board_type == "BF526-EZBRD" } {
                        send -s "M\r"
             } else {
                        send -s "\r"
             }

        }

        -re "Support for generic platform NAND driver.*MTD_NAND_PLATFORM.*\\\[.*]" {
             if { $board_type == "BF537-STAMP" } {
                        send -s "M\r"
             } else {
                        send -s "N\r"
             }
        }

         -re "Generic uClinux RAM/ROM filesystem support.*MTD_UCLINUX.*\\\[.*]" {
                 send -s "N\r"
        }

         -re "Enable UBI.*MTD_UBI.*\\\[.*]" {
                 send -s "Y\r"
        }

         -re "UBIFS file system support.*UBIFS_FS.*\\\[.*]" {
                 send -s "Y\r"
        }

         -re "mtd-utils.*USER_MTDUTILS.*\\\[.*]" {
            send "Y\r"
        }

         -re "ubifs utilities.*USER_MTDUTILS_UBIUTILS.*\\\[.*]" {
            send "Y\r"
        }


        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp

send_user "Ending $argv0\n"
log_file
