#!/usr/bin/expect

source  ../kernel_config.exp

log_file [log_file_name "$argv0"]

send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set case_num 0
set MAX "\r"
set NUM_CYLINDER_DOS "+8G"
set NUM_CYLINDER_EXT2 "+20G"

sleep 10
send "mkdir /mnt/hd1\r"
send "mkdir /mnt/hd2\r"

set timeout 5
incr case_num
send "dmesg\r"
while 1 {
    expect {
        -re "TOSHIBA MK4032GAX.*78140160 sectors.*configured for UDMA.*sda: sda1" {
            sleep 2
            send_user "Harddisk found, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Harddisk not found, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/interrupts\r"
while 1 {
    expect {
        -re "pata-bf54x.*$kernel_prompt" {
            send_user "Libata found, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Libata not found, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/devices\r"
while 1 {
    expect {
        -re "sd.*$kernel_prompt" {
            send_user "Libata block device found\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Libata block device not found\n"
            case_fail $case_num
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "p\r"
set timeout 10
while 1 {
    expect {
        -re "/dev/sda1" {
            send "d\r"
            expect -re "Partition number.*"
            send "1\r"
            expect -re "Command.*"
            send "w\r"
            expect  -re $kernel_prompt
            send_user "sda1 is deleted\n"
            break
        }
        timeout {
            send "q\r"
            break
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "p\r"
set timeout 10
while 1 {
    expect {
        -re "/dev/sda2" {
            send "d\r"
            expect -re "Partition number.*"
            send "2\r"
            expect -re "Command.*"
            send "w\r"
            expect  -re $kernel_prompt
            send_user "sda1 is deleted\n"
            break
        }
        timeout {
            send "q\r"
            break
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "n\r"
expect -re "primary partition.*:"
send "p\r"
expect -re "Partition number.*:"
send "1\r"
expect -re "First cylinder.*:"
send "\r"
expect -re "Last cylinder.*:"
send "$NUM_CYLINDER_DOS\r"
expect -re "Command.*:"
send "t\r"
expect -re "Partition number.*:"
send "1\r"
expect -re "Hex code.*:"
send "b\r"
expect -re "Command.*:"
send "n\r"
expect -re "primary partition.*"
send "p\r"
expect -re "Partition number.*"
send "2\r"
expect -re "First cylinder.*"
send "\r"
expect -re "Last cylinder.*"
send "$NUM_CYLINDER_EXT2\r"
expect -re "Command.*"
send "w\r"
expect -re $kernel_prompt

set timeout 300
incr case_num
send "mkdosfs -F 32 /dev/sda1\r"
while 1 {
    expect {
        -re "Hardware Trace.*$kernel_prompt" {
            send_user "mkdosfs sda1 crash, test fail\n"
            case_fail $case_num
        }
        -re "mkdosfs.*\\\)..$kernel_prompt" {
            send_user "mkdosfs sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mkdosfs sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 900
incr case_num
send "mke2fs /dev/sda2\r"
while 1 {
    expect {
        -re "Hardware Trace.*$kernel_prompt" {
            send_user "mke2fs sda2 crash, test fail\n"
            case_fail $case_num
        }
        -re "done.*Writing superblocks.*done.*$kernel_prompt" {
            send_user "mke2fs sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mke2fs sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/sda1 /mnt/hd1\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            send_user "mount sda1 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "mount sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/sda2 /mnt/hd2\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            send_user "mount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "mount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cp /bin/busybox /mnt/hd1/abc\r"
expect  -re $kernel_prompt
send "ls /mnt/hd1\r"
while 1 {
    expect {
        -re "abc.*$kernel_prompt" {
            send_user "Copy to HD done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Copy to HD timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "rm /mnt/hd1/abc\r"
expect  -re $kernel_prompt
send "ls /mnt/hd1\r"
while 1 {
    expect {
        -re "abc.*$kernel_prompt" {
            send_user "Delete in HD fail, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "Delete in HD done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Delete in HD timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time dd conv=fsync if=/dev/zero of=/mnt/hd1/test.bin bs=1M count=10\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            send_user "Generate file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/hd1/test.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time dd conv=fsync if=/dev/zero of=/mnt/hd2/test.bin bs=1M count=10\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            send_user "Generate file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/hd2/test.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*$kernel_prompt" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "umount /mnt/hd1\r"
while 1 {
    expect {
        -re "umount.*failed.*$kernel_prompt" {
            send_user "umount sda1 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "umount /mnt/hd2\r"
while 1 {
    expect {
        -re "umount.*failed.*$kernel_prompt" {
            send_user "umount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

step "Start bonnie++ test"

set timeout 900
incr case_num
send "mke2fs /dev/sda2\r"
while 1 {
    expect {
        -re "Hardware Trace.*$kernel_prompt" {
            send_user "mke2fs sda2 crash, test fail\n"
            case_fail $case_num
        }
        -re "done.*Writing superblocks.*done.*$kernel_prompt" {
            send_user "mke2fs sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mke2fs sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/sda2 /mnt/hd2\r"
while 1 {
    expect {
        -re "mount.*failed.*$kernel_prompt" {
            send_user "mount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "mount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 3600
incr case_num
send "time bonnie++ -u root -d /mnt/hd2 -s 200M\r"
while 1 {
    expect {
        -re "Hardware Trace" {
            send_user "bonnie++ failed\n"
            case_fail $case_num
        }
        -re "Latency.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "bonnie++ timeout\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "umount /mnt/hd2\r"
while 1 {
    expect {
        -re "umount.*failed.*$kernel_prompt" {
            send_user "umount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
