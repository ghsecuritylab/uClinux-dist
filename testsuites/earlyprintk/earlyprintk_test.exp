#!/usr/bin/expect

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reset the board"

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "\r"
expect ">"
send -s "version\r"
set timeout 20
while 1 {
    expect {
        "U-Boot" {
            expect ">"
            send_user "We are in u-boot\n"
            set where_are_we "uboot"
            break
        }
        "Linux" {
            expect ">"
            send_user "We are in the kernel\n"
            set where_are_we "kernel"
            break
        }
        timeout {
            send_user "Can't tell if we are in u-boot or the kernel\n"
# If the first version command doesn't work, run it once again.
            send "version\r"
        }
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    send -s "reset\r"
    send_user "sending reset\n"
} else {
    if { $where_are_we == "kernel" } {
        set timeout 60
        send -s "reboot\r"
        send_user "sending reboot\n"
    } else {
# If we don't know where we are, hit control-C and enter
        set timeout 10
        expect "*"
        send_user "sending control-C\n"
        send "\3"
        sleep 1
        send "\r"
    }
}

while 1 {
    expect {
        -re "RAM: +(\[0-9]+) Mi?B" {
            set ram_size $expect_out(1,string)
            send_user "\nRAM size is $ram_size MB. \n"
        }
        "Hit any key " {
            send "\r"
            break
        }
        timeout {
            send_user "Fail to reboot the kernel.\n"
            break
        }
    }
}

expect ">"
send -s "set bootargs $bootargs\r"
expect ">"
send -s "set serverip $serverip\r"
expect ">"
send -s "set ipaddr $targetip\r"
expect ">"
send -s "save\r"
expect ">"

if { $ram_size <= 32 } {
    set bootaddr $bootaddr_low
} else {
    set bootaddr $bootaddr_high
}

send -s "tftpboot $bootaddr $boot_image\r"
while 1 {
    expect {
        -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
            set image_size $expect_out(1,string)
            send_user "Image size is $image_size\n"
            break
        }
        timeout {
            send_user "Fail to tftp download linux image."
# if tftpboot from high bootaddr failed, try to reload image from low bootaddr
            break
        }
    }
}

if { $boot_image == "linux" } {
         set bootcmd bootelf
   } elseif { $boot_image == "uImage" } {
         set bootcmd bootm
}

expect ">"
send -s "run addip\r"
expect ">"
send -s "$bootcmd\r"


step "Start testing"
set case_num 0
incr case_num
set timeout 60
while 1 {
    expect {
        -re "Test early printk" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
            break
        }
    }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"
send_user "Ending $argv0\n"

log_file
