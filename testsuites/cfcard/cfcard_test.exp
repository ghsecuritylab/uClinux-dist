#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set TEST_PASS pass
set TEST_FAIL fail

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"
set timeout 120
set case_num 0

incr case_num
send "dmesg\r" 
while 1 {
   expect {
     -re "bfin_cf_pcmcia: Blackfin CompactFlash/PCMCIA Socket Driver.*pcmcia: registering new device pcmcia0.0.*sda: sda1" {
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send -s "cardctl ident\r"
while 1 {
   expect {
     -re "product info" {
                expect -re $kernel_prompt
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
                exit
         }
     }
}


incr case_num
send "dump_cis\r"
while 1 {
   expect {
     -re "Socket 0:.*dev_info.*disk_interface.*cftable_entry" {
                expect -re $kernel_prompt
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
                exit
         }
     }
}

incr case_num
send "cardctl status\r"
while 1 {
   expect {
     -re "Socket 0:.*function 0:.*ready" {
                expect -re $kernel_prompt
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
                exit
         }
     }
}



while 1 {

incr case_num
send "fdisk /dev/sda\r" 
expect {
     -re "Command .*:" {		
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }

send "p\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
     
send "d\r" 
   expect {
     -re "Partition number.*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }

send "1\r" 
   expect {
     -re "Command .*:" {
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }

send "n\r" 
   expect {
     -re "Command action.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
 
send "p\r" 
   expect {
     -re "Partition number.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }    

send "1\r" 
   expect {
     -re "First cylinder.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     } 
 
send "\r" 
   expect {
     -re "Last cylinder.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     } 
     
send "+2M\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
     
send "w\r" 
   expect {
     -re "Syncing disks." {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

expect -re $kernel_prompt
incr case_num
send "mke2fs /dev/sda1\r" 
while 1 {
   expect {
     -re "done.*done" {
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "mount /dev/sda1 /mnt\r" 
while 1 {
   expect {
       -re $kernel_prompt {
                case_pass $case_num
		break
      }

      "Error|No" {
                case_fail $case_num
                exit
         }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}


incr case_num
send "cp /bin/pwd /mnt\r" 
while 1 {
   expect {
       -re $kernel_prompt {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "ls -al /mnt\r" 
while 1 {
   expect {
       -re $kernel_prompt {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "time cat /mnt/pwd > /dev/null\r" 
while 1 {
   expect {
     -re "real.*user.*sys" {
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "cat /proc/filesystems\r" 
while 1 {
   expect {
     -re "ext2.*vfat.*msdos" {
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "df\r" 
while 1 {
   expect {
      "/dev/sda1" {
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "while \[ 1 \]; do md5sum /mnt/pwd ; done\r" 
while 1 {
   expect {
      -re "\[0-9a-z]+  /mnt/pwd" {
                sleep 3
                send "\3"
                expect -re $kernel_prompt
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "umount /mnt\r" 
while 1 {
   expect {
      -re $kernel_prompt {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "cardctl eject\r"
while 1 {
   expect {
     -re "pccard: card ejected from slot 0" {
                expect -re $kernel_prompt
                case_pass $case_num
                break
      }

      timeout {
                case_fail $case_num
                exit
         }
     }
}


send_log "                       \n"
send_log "\n$TITLE ............\[PASS\]\n"
                                     
send_user "Ending $argv0\n"
log_file
 


