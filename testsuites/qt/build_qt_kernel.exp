#!/usr/bin/expect

#
# Build Kernel for both Konqueror and QT test
# QT kernel must be built before build konqueror source
#

source ../kernel_config.exp
source ../board_info.exp
source config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set env(EXT2_BLOCKS) "30720"
set HAVE_KERNEL_ONLY_IMAGE 1

if { $argc == 2 } {
    set format [lindex $argv 1]
    send_user "\n#### binary format is $format\n"
} else {
    puts "Please input board_type and binary_format(flat or fdpic)"
    exit
}

step "Make config."
cd $uclinux_path/testsuites
source  make_default_config.exp

# Following make specific configuration for this case.
cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#TFT-LCD is used to test QT. Other video module can also be used.
#TFT-LCD driver is different for different boards.
#So all video related dirvers are built as modules.
#In fact we can also directly use kernels for LCD/ADV7393 test to test QT.
while 1 {
    expect {
        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -nocase -re "\\\[\[^\r]*] (\\\(NEW\\\) )?(\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

        -re "Build QT \\\(LIB_QT\\\) \\\[./.*]" {
            send "Y\r"
        }

        -re "Build WebKit.*LIB_QT_WEBKIT.*\\\[./.*]" {
            send "N\r"
        }

        -re "Build demos/examples.*LIB_QT_EXAMPLES.*\\\[./.*]" {
            send "Y\r"
        }

#Video Output
        -re "Support for generic platform NAND driver.*MTD_NAND_PLATFORM.*\\\[.*]" {
            #conflict with TFT LCD
            send "N\r"
        }

        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            send "M\r"
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send "Y\r"
        }

        -re "SHARP LQ035 TFT LCD.*FB_BF537_LQ035.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SHARP LQ043 TFT LCD.*BF548 EZKIT.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Varitronix COG-T350MCQB TFT LCD display.*FB_BFIN_T350MCQB.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SHARP LQ035Q1DH02 TFT LCD.*FB_BFIN_LQ035Q1.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT-V2" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Blackfin ADV7393 Video encoder.*FB_BFIN_7393.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

#USB mouse
        -re "CFI Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {
#CONFIG_MTD_PHYSMAP claims the entire Async. Memory Space
#need to entirely disable it while using various U-Connector boards
            send "N\r"
        }

        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for Host-side USB.*USB.*\\\[.*]" {
            send "Y\r"
        }

        -re "Bank 3.*BANK_3.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "0xAAC2\r"
            } else {
                send "\r"
            }
        }

        -re "ISP1362 HCD support \\\(USB_ISP1362_HCD\\\).*\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "GPIO for Interrupt.*USB_ISP1362_BFIN_GPIO_IRQ.*\\\[.*]" {
#For JP4 on usb add-on board, pin15 & 16 should be connected.
#PB4 on BF537-STAMP should be disabled.
            if { $board_type == "BF537-STAMP" } {
                send "55\r"
            } else {
                send "\r"
            }
        }

#        -re "SL811HS HCD support.*USB_SL811_HCD.*\\\[.*]" {
#            if { $board_type == "BF537-STAMP" } {
#                send "Y\r"
#            } else {
#                send "N\r"
#            }
#        }

        -re "Inventra Highspeed Dual Role Controller.*USB_MUSB_HDRC.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" || [string match "BF527-EZKIT*" $board_type] } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Platform Glue Layer \\\[.*]" {
            send "Y\r"
        }

        -re "Disable DMA.*always use PIO.*MUSB_PIO_ONLY.*\\\[.*]" {
            send "\r"
        }

        -re "USB Human Interface Device \\\(full HID\\\) support.*USB_HID.*\\\[.*]" {
            send "Y\r"
        }

        -re "Generic input layer.*needed for keyboard, mouse.*INPUT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Mouse interface.*INPUT_MOUSEDEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Horizontal screen resolution.*INPUT_MOUSEDEV_SCREEN_X.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "480\r"
            } else {
                send "320\r"
            }
        }

        -re "Vertical screen resolution.*INPUT_MOUSEDEV_SCREEN_Y.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "272\r"
            } else {
                send "240\r"
            }
        }

        -re "Event interface.*INPUT_EVDEV.*\\\[.*]" {
            send "Y\r"
        }

        -re "Keyboards.*INPUT_KEYBOARD.*\\\[.*]" {
            send "Y\r"
        }

        -re "Mice.*INPUT_MOUSE.*\\\[.*]" {
            send "Y\r"
        }

#support atapi hard disk
        -re "Serial ATA \\\(prod\\\) and Parallel ATA \\\(experimental\\\) drivers.*ATA.*\\\[.*]" {
            send "Y\r"
        }

        -re "Blackfin 54x ATAPI support.*PATA_BF54X.*\\\[.*]" {
            send "Y\r"
        }

        -re "SCSI target support.*SCSI_TGT.*\\\[.*]" {
            send "N\r"
        }

        -re "SCSI disk support.*BLK_DEV_SD.*\\\[.*]" {
            send "Y\r"
        }

        -re "SCSI CDROM support.*BLK_DEV_SR.*\\\[.*]" {
            send "Y\r"
        }

        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT \\\(Windows-95\\\) fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Codepage 437 \\\(United States, Canada\\\).*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "fdisk.*USER_FDISK_FDISK.*\\\[.*]" {
            send "Y\r"
        }

        -re "fdisk.*USER_BUSYBOX_FDISK.*\\\[.*]" {
            send "N\r"
        }

        -re "e2fsck.*USER_E2FSPROGS_E2FSCK_E2FSCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "mke2fs.*USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "mkdosfs.*USER_DOSFSTOOLS_MKDOSFS.*\\\[.*]" {
            send "Y\r"
        }

        -re "dosfsck.*USER_DOSFSTOOLS_DOSFSCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            if { $format == "fdpic" } {
                send  "4\r"
            } elseif { $format == "flat" } {
                send  "1\r"
            } else {
                send "\r"
            }
        }

        -re "VIDEO test program.*USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
            send "Y\r"
        }

        -re "pictureflow.*USER_PICTUREFLOW.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites
step "Make"
source make_kernel.exp

cd $uclinux_path/testsuites
step "Copy linux"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
