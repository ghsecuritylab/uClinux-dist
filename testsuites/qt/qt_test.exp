#!/usr/bin/expect

source  ../kernel_config.exp
source  ../board_info.exp
source  ./config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

if { $argc == 2 } {
    set format [lindex $argv 1]
    send_user "\n#### binary format is $format\n"
} else {
    puts "Please input board_type and binary_format(FLAT or FDPIC)"
    exit
}

append TITLE " ($format)"

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set hd_dev sda2
set case_num 0
set timeout 10

sleep 15

send "ifconfig eth0 $targetip\r"
expect -re $kernel_prompt

set timeout 60
incr case_num
send "ping -c 15 $serverip\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No such).*$kernel_prompt" {
            break
        }
        -re "1. packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "mkdir /mnt/rootfs\r"
expect -re $kernel_prompt
send "mount /dev/$hd_dev /mnt/rootfs\r"
expect -re $kernel_prompt

set timeout 60
incr case_num
send "ping -c 15 $serverip\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No such).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "1. packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send_user "rcp runcp.sh to $targetip"
if [ catch {exec rcp ../runcp.sh root@$targetip:/.} ] {
    send_user "$errorInfo\n"
    case_fail $case_num
}

incr case_num
send_user "cp $uclinux_path/staging/usr/qt/examples/widgets/calendarwidget/calendarwidget ./qt_sample\n"
if [ catch {exec cp $uclinux_path/staging/usr/qt/examples/widgets/calendarwidget/calendarwidget ./qt_sample} ] {
    send_user "FAIL: no qt sample\n"
    send_user "$errorInfo\n"
    case_fail $case_num
}

incr case_num
send_user "rcp ./qt_sample root@$targetip:/bin\n"
if [ catch {exec rcp ./qt_sample root@$targetip:/bin} ] {
    send_user "FAIL: rcp qt sample to target board\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: rcp qt sample to target board\n"
}

incr case_num
send_user "rcp -r $user/download/media root@$targetip:/\n"
if [ catch {exec rcp -r $user/download/media root@$targetip:/} ] {
    send_user "FAIL: copy sample pictures to target board\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: copy sample pictures to target board\n"
}

sleep 1

set timeout 120
incr case_num
send "rm -fr /mnt/rootfs/*\r"
while 1 {
    expect {
        -re "(\[fF]ail|\[eE]rror|No such).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            send_user "copy rootfs to harddisk timeout\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "./runcp.sh\r"
while 1 {
    expect {
        -re "copy rootfs done.*$kernel_prompt" {
            send_user "finish to copy rootfs to harddisk\n"
            case_pass $case_num
            break
        }
        eof {
            break
        }
        timeout {
            send_user "copy rootfs to harddisk timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "umount /mnt/rootfs\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            send_user "umount /mnt/rootfs fail, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount /mnt/rootfs done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount /mnt/rootfs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

sleep 5
incr case_num
send "reboot\r"
set timeout 60
while 1 {
    expect {
        "Hit any key " {
            send "\r"
            break
        }

        timeout {
            send_user "failed reset attemp\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 20
send -s "setenv hdargs setenv bootargs root=/dev/$hd_dev rw console=ttyBF$def_uart_port,$baud_rate\r"
expect ">"
send -s "setenv hdboot \'tftpboot 0x1000000 $compressed_kernel_only_image; run hdargs; run addip; bootm\'\r"
expect ">"
send -s "save\r"
while 1 {
    expect {
        -re "sectors.*>" {
            send_user "save!!!\n"
            break
        }
        timeout {
            send_user "save timeout!!!\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 180
send -s "run hdboot\r"
while 1 {
    expect {
        -re "Kernel panic" {
            send_user "kernel panic detected..."
            case_fail $case_num
        }

        -re $kernel_prompt {
            send_user "successful boot attempt"
            case_pass $case_num
            break
        }

        timeout {
            send_user "failed boot attempt"
            case_fail $case_num
        }
    }
}

sleep 20

incr case_num
set timeout 5
send "dmesg|grep VFS\r"
while 1 {
    expect {
        -re "VFS\\\: Mounted root \\\(ext2 filesystem\\\).*$kernel_prompt" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "ls /\r"
while 1 {
    expect {
        -re "runcp\\\.sh.*$kernel_prompt" {
            send_user "successfully mount harddisk as the root filesystem\r"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
if { $board_type == "BF548-EZKIT" } {
    set module "bf54x_lq043fb"
} elseif {$board_type == "BF527-EZKIT" } {
    set module "bfin_t350mcqb_fb"
} elseif {$board_type == "BF527-EZKIT-V2" } {
    set module "bfin_lq035q1_fb"
} elseif { $board_type == "BF537-STAMP" } {
    set module "bf537_lq035"
} else {
    send_user "Wrong board_type $board_type\r"
    case_fail $case_num
}
send "modprobe $module\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "initializ.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5
incr case_num
set timeout 30
send "qt_sample -qws\r"
while 1 {
    expect {
        -re "\r\n\[a-zA-Z0-9]" {
            case_fail $case_num
        }
        timeout {
            case_pass $case_num
            break
        }
    }
}

set timeout 10
incr case_num
send -s "\3"
while 1 {
    expect {
         -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "cd media\r"
expect -re $kernel_prompt

incr case_num
set timeout 30
send "pictureflow -qws\r"
while 1 {
    expect {
        -re "\r\n\[a-zA-Z0-9]" {
            case_fail $case_num
        }
        timeout {
            case_pass $case_num
            break
        }
    }
}

set timeout 10
incr case_num
send -s "\3"
while 1 {
    expect {
         -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
