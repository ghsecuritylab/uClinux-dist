#!/usr/bin/expect

#
# This usb device test script is for Gadget Zero on BF548-EZKIT
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set musb_mode [lindex $argv 1]
send_user "\n#### musb_mode is $musb_mode\n"

if { $argc < 1} {
    puts "Please input: musb_mode(PIO or DMA)"
    exit
}
append TITLE " ($musb_mode)"


step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set case_num 0

set timeout 5
sleep 3
send "ifconfig eth0 $targetip\r"
sleep 3
send "\r"
expect -re $kernel_prompt

incr case_num
set timeout 10
spawn make clean -f Makefile.testusb -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "Make clean done\n"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
spawn make -f Makefile.testusb -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "Make done\n"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "cd $uclinux_path/testsuites/usbdev\r"
expect "#"
send "lsmod |grep usbtest\r"
while 1 {
    expect {
        -re "\r\nusbtest.*#" {
            case_pass $case_num
            break
        }
        -re "#" {
            send "sudo insmod $uclinux_path/download/usbtest.ko\r"
            while 1 {
                expect {
                    -re "insmod:|\[eE]rror|\[fF]ail" {
                        case_fail $case_num
                    }
                    -re "#" {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        send "\3"
                        expect "#"
                        case_fail $case_num
                    }
                }
            }
            break
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "lsmod |grep usbtest\r"
while 1 {
    expect {
        -re "\r\nusbtest.*#" {
            case_pass $case_num
            break
        }
        -re "#" {
            case_fail $case_num
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "sudo mount -t usbfs none /proc/bus/usb/\r"
while 1 {
    expect {
        -re "mount: none already mounted" {
            case_pass $case_num
            break
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 4
send "mount\r"
while 1 {
    expect {
        -re "none on /proc/bus/usb type usbfs.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $kermit_spawn_id

incr case_num
set timeout 5
send "modprobe g_zero autoresume=5\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Gadget Zero.*zero ready.*(high|full)-speed config.*source/sink" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_zero.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


set spawn_id $host_spawn_id

sleep 2

incr case_num
set timeout 5
send "lsusb\r"
while 1 {
    expect {
        -re ".*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsusb|grep -i \"Gadget Zero\"|awk '{print \$2\" \"\$4}'\r"
while 1 {
    expect {
        -re "(\[0-9]+)( )(\[0-9]+)" {
            set gadget_bus "$expect_out(1,string)"
            set gadget_dev "$expect_out(3,string)"
            send_user "gadget_bus=$gadget_bus;gadget_dev=$gadget_dev\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set Total_Count 9
set fail_count 0

incr case_num
set timeout 5
send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t14 -c 15000 -s 256 -v 1\r"
while 1 {
    expect {
        -re "test 14.*\[0-9]\\\.\[0-9]+ secs" {
            case_pass $case_num
            break
        }
        timeout {
            incr fail_count
            send_user "testusb t14 fail\n"
            break
        }
    }
}

for {set count 1} {$count <= $Total_Count} {incr count} {
    incr case_num
    set timeout 5
    send "sudo ./src/testusb -D /proc/bus/usb/$gadget_bus/$gadget_dev -t$count\r"
    while 1 {
        expect {
            -re "test $count.*\[0-2]\\\.\[0-9]+ secs" {
                case_pass $case_num
                break
            }
            timeout {
                incr fail_count
                send_user "testusb t$count fail\n"
                break
            }
        }
    }
}

incr case_num
set timeout 5
send "sudo rmmod usbtest\r"
while 1 {
    expect {
        -re "rmmod:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "sudo umount /proc/bus/usb\r"
while 1 {
    expect {
        -re "umount:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set spawn_id $kermit_spawn_id

incr case_num
set timeout 5
send "modprobe -r g_zero\r"
while 1 {
    expect {
        -re "modprobe:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_zero" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
if { $fail_count == 0 } {
    send_user "No error when running testusb\n"
    case_pass $case_num
} else {
    send_user "testusb fail $fail_count times\n"
    case_fail $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
