#!/usr/bin/expect

#
# This usb device test script is for GadgetFS on BF548-EZKIT
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set musb_mode [lindex $argv 1]
send_user "\n#### musb_mode is $musb_mode\n"

if { $argc < 1} {
    puts "Please input: musb_mode(PIO or DMA)"
    exit
}
append TITLE " ($musb_mode)"


step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set case_num 0

set timeout 5
sleep 3
send "ifconfig eth0 $targetip\r"
sleep 5
send "\r"
expect -re $kernel_prompt

incr case_num
set timeout 5
send "ifconfig\r"
while 1 {
    expect {
        -re "$targetip.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
spawn make clean -f Makefile.usb -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "Make clean done\n"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
spawn make -f Makefile.usb -C src
while 1 {
    expect {
        -re "\[eE]rror" {
            case_fail $case_num
        }
        eof {
            send_user "Make done\n"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 20
spawn rcp src/usb root@$targetip:/
while 1 {
    expect {
        -re "No route to host|Connection refused" {
            case_fail $case_num
        }
        eof {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 15
send "sudo mount -t usbfs none /proc/bus/usb/\r"
while 1 {
    expect {
        -re "mount: none already mounted" {
            case_pass $case_num
            break
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 4
send "mount\r"
while 1 {
    expect {
        -re "none on /proc/bus/usb type usbfs.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set spawn_id $kermit_spawn_id

incr case_num
set timeout 3
send "mkdir /dev/gadget\r"
while 1 {
    expect {
        -re "mkdir:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t gadgetfs gadgetfs /dev/gadget\r"
while 1 {
    expect {
        -re "nop musb-hdrc: " {
            case_pass $case_num
            break
        }
        -re "mount:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "USB Gadget filesystem.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 2
incr case_num
set timeout 3
send "ls /dev/gadget/ -l\r"
while 1 {
    expect {
        -re "(musb_hdrc|musb-hdrc).*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "./usb -r \"1.3\" -v\r"
while 1 {
    expect {
        -re "panic|\[fF]ail|\[eE]rror" {
            case_fail $case_num
        }
        -re "gadgetfs: connected.*thread start.*thread start" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set spawn_id $host_spawn_id

incr case_num
set timeout 5
send "cat /proc/bus/usb/devices\r"
while 1 {
    expect {
        -re "Manufacturer=Licensed to Code, LLC.*Product=My Source/Sink Product.*#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "umount /proc/bus/usb\r"
while 1 {
    expect {
        -re "umount:|\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 4
send "mount\r"
while 1 {
    expect {
        -re "none on /proc/bus/usb type usbfs.*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set spawn_id $kermit_spawn_id

incr case_num
set timeout 5
send "\3"
while 1 {
    expect {
        -re "done.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
