#!/usr/bin/expect

#
# This usb device test script is for Ethernet over USB (Gadget) on BF548-EZKIT with Linux host
#

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set musb_mode [lindex $argv 0]
send_user "\n#### musb_mode is $musb_mode\n"

if { $argc < 1} {
    puts "Please input: musb_mode(PIO or DMA)"
    exit
}
append TITLE " ($musb_mode)"


step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

set case_num 0
set usb_peripheral "192.168.1.66"
set usb_host  "192.168.1.56"
sleep 3

step "Gadget Ethernet config in peripheral board"

incr case_num
set timeout 5
send "modprobe g_ether host_addr=00:dc:c8:f7:75:05 dev_addr=00:dd:dc:eb:6d:f1\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "Ethernet Gadget.*g_ether ready.*(high|full) speed.*CDC Ethernet" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "lsmod\r"
while 1 {
    expect {
        -re "(lsmod:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "g_ether.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "ifconfig usb0 $usb_peripheral up\r"
sleep 3
send "\r"
expect -re $kernel_prompt

incr case_num
set timeout 10
send "ifconfig usb0\r"
while 1 {
    expect {
        -re "$usb_peripheral.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


step "Gadget Ethernet config in host PC"

spawn /bin/bash
set host_spawn_id $spawn_id

incr case_num
set timeout 15
send "su -\r"
while 1 {
    expect {
        -re "\[pP]assword" {
            send "$password\r"
            continue
        }
        -re "\[eE]rror|\[fF]ail" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "ifconfig eth2 $usb_host\r"
while 1 {
    expect {
        -re "(No such device|\[eE]rror|\[fF]ail).*#" {
            case_fail $case_num
        }
        -re "#" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}


step "Start testing cycle"

set spawn_id $host_spawn_id 

sleep 10
incr case_num
set timeout 30
send "ping -f -l50 -c 1000 $usb_peripheral\r"
while 1 {
    expect {
        -re "1000 packets transmitted, 1000 received.*#" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 30
send "ping -f -l50 -c 10000 $usb_peripheral\r"
while 1 {
    expect {
        -re "10000 packets transmitted, 10000 received.*#" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect "#"
            case_fail $case_num
        }
    }
}

for {set size 1024} {$size <= 4096 } { incr size 512} {
    incr case_num
    set timeout 2
    send "ping -c 1 -s $size $usb_peripheral\r"
    while 1 {
        expect {
            -re "wrong data byte #.*#" {
                case_fail $case_num
            }
            -re "1 packets transmitted, 1 received.*#" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect "#"
                case_fail $case_num
            }
        }
    }
}


set spawn_id $kermit_spawn_id

incr case_num
set timeout 1200
send "ping -f -l50 -c 1000 $usb_host\r"
while 1 {
    expect {
        -re "1000 packets transmitted, 1000 packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect -re $kernel_prompt
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 1200
send "ping -f -l50 -c 10000 $usb_host\r"
while 1 {
    expect {
        -re "10000 packets transmitted, 10000 packets received.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send "\3"
            expect -re $kernel_prompt
            case_fail $case_num
        }
    }
}

for {set size 1024} {$size <= 4096 } { incr size 512} {
    incr case_num
    set timeout 2
    send "ping -c 1 -s $size $usb_host\r"
    while 1 {
        expect {
            -re "wrong.*$kernel_prompt" {
                case_fail $case_num
            }
            -re "1 packets transmitted, 1 packets received.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send "\3"
                expect "#"
                case_fail $case_num
            }
        }
    }
}


step "Clean Gadget Ethernet driver at the end of testing cycle"

incr case_num
set timeout 5
send "modprobe -r g_ether\r"
while 1 {
    expect {
        -re "(modprobe:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "lsmod\r"
while 1 {
    expect {
        -re "g_ether" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"

log_file
