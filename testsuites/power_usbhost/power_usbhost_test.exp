#!/usr/bin/expect

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set musb_mode [lindex $argv 1]
send_user "\n#### musb_mode is $musb_mode\n"

if { $argc < 1} {
    puts "Please input: musb_mode(PIO or DMA)"
    exit
}
append TITLE " ($musb_mode)"


step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

set wakeup_pattern "Syncing filesystems.*Freezing user space processes \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nFreezing remaining freezable tasks \.\.\. \\\(elapsed.*seconds\\\) done\.\r\nSuspending console\\\(s\\\).*Restarting tasks.*done"

set wait_time 10
set standby_fail 0
set pm_state_str standby
set Total_Count 5

proc standby_test_case {} {
    global case_num
    global kernel_prompt
    global wait_time
    global standby_fail
    global pm_state_str
    global wakeup_pattern
    global usb_dev1

    set timeout [expr $wait_time + 10]
    incr case_num
    send "\nrtcwake -s $wait_time -m $pm_state_str\r"
    while 1 {
        expect {
            -re $wakeup_pattern {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Wake up fail\n"
                incr standby_fail
                break
            }
        }
    }

    set timeout 5
    expect -re "Full\r\n|lpa 0x41E1\r\n"

    incr case_num
    set timeout 5
    send "mount -t ext2 /dev/$usb_dev1 /mnt\r"
    while 1 {
        expect {
            -re "(mount:|\[fF]ail|\[eE]rror).*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                break
            }
        }
    }

    incr case_num
    set timeout 5
    send "mount\r"
    while 1 {
        expect {
            -re "/dev/$usb_dev1 on /mnt type ext2.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 5
    send "echo teststring > /mnt/usbhost_testfile; cat /mnt/usbhost_testfile\r"
    while 1 {
        expect {
            -re "teststring\r\n$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 400
    send "time dd conv=fsync if=/dev/zero of=/mnt/10m.bin bs=1M count=10\r"
    while 1 {
        expect {
            -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "Generate a 10M file timeout, test fail\n"
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 5
    send "rm /mnt/usbhost_testfile; rm /mnt/*.bin\r"
    while 1 {
        expect {
            -re "(rm:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    send "ls /mnt/\r"
    set timeout 2
    while 1 {
        expect {
            -re "usbhost_testfile|10m\.bin" {
                case_fail $case_num
                break
            }
            -re $kernel_prompt {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    set timeout 10
    incr case_num
    send "umount /mnt\r"
    while 1 {
        expect {
            -re "umount:.*$kernel_prompt" {
                case_fail $case_num
            }
            -re $kernel_prompt {
                break
            }
            timeout {
                send -s "\3"
                    break
            }
        }
    }
}

set case_num 0
set timeout 20
expect "Attached SCSI removable disk"
send "\r"
expect -re $kernel_prompt

if { [string match "BF527-EZKIT*" $board_type] } {
    set usb_dev sda
    set usb_dev1 sda1
    set usb_dev2 sda2
} elseif { $board_type == "BF548-EZKIT" } {
    set usb_dev sdb
    set usb_dev1 sdb1
    set usb_dev2 sdb2
} else {
    send_user "Board type error, exit!"
    exit
}

incr case_num
set timeout 5
send "dmesg|grep -i sd\r"
while 1 {
    expect {
        -re "$usb_dev.*$usb_dev1 $usb_dev2.*Attached SCSI removable disk.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 5
incr case_num
set timeout 120
send "mke2fs /dev/$usb_dev1\r"
while 1 {
    expect {
        -re "done.*done.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "mount -t ext2 /dev/$usb_dev1 /mnt\r"
while 1 {
    expect {
        -re "(mount:|\[fF]ail|\[eE]rror).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            break
        }
    }
}

incr case_num
set timeout 5
send "mount\r"
while 1 {
    expect {
        -re "/dev/$usb_dev1 on /mnt type ext2.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "echo teststring > /mnt/usbhost_testfile; cat /mnt/usbhost_testfile\r"
while 1 {
    expect {
        -re "teststring\r\n$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 400
send "time dd conv=fsync if=/dev/zero of=/mnt/10m.bin bs=1M count=10\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate a 10M file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 5
send "rm /mnt/usbhost_testfile; rm /mnt/*.bin\r"
while 1 {
    expect {
        -re "(rm:|\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "ls /mnt/\r"
set timeout 2
while 1 {
    expect {
        -re "usbhost_testfile|10m\.bin" {
            case_fail $case_num
            break
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 10
incr case_num
send "umount /mnt\r"
while 1 {
    expect {
        -re "umount:.*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            break
        }
        timeout {
            send -s "\3"
            break
        }
    }
}

for {set count 1} {$count <= $Total_Count} {incr count} {
    standby_test_case
    send_user "\nStandby test case 1 round $count pass\n\n"
}

all_pass
send_user "Ending $argv0\n"
log_file
