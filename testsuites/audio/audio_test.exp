#!/usr/bin/expect

#
#Test program to test the audio driver and memory leak.
#

source ../kernel_config.exp

if { $argc < 2} {
    puts "Please input: board_type, audio_dev"
    puts "Refer to build_audio_kernel.exp for audio_dev."
    exit
}
set audio_dev [lindex $argv 1]
set title ${audio_dev}_test_log

log_file $title
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]
append TITLE " ($audio_dev)"


step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start testing."

set count_under_run 0
set case_num 0
set output_file_type "wav"

if { $audio_dev == "audio_ad1938" || $audio_dev == "audio_ad1836" } {
    set channel "Stereo"
    set channel_num "2"
    set sample_rate "48000"
    set alsa_format "S32_LE"
    set oss_format "32"
} elseif { $audio_dev == "audio_ssm2603" } {
    set channel "Stereo"
    set channel_num "2"
    set sample_rate "48000 96000 44100 8000"
    set alsa_format "S32_LE S16_LE"
    set oss_format "32 24 16"
} elseif { $audio_dev == "audio_ad73311" } {
    set channel "Mono"
    set channel_num "1"
    set sample_rate "8000"
    set alsa_format "S16_LE"
    set oss_format "16"
} else {
    send_user "Can not recognize audio device, exit"
    exit
}

proc alsa_rec_play {format rate file_type} {
    global case_num
    global kernel_prompt
    global count_under_run
    global channel
    global channel_num

    incr case_num
    set timeout 15
    send -s "arecord -t $file_type -c $channel_num -f $format -r $rate -d 5 $file_type\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    send -s "aplay $file_type\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

proc alsa_rec2play {format rate file_type} {
    global case_num
    global kernel_prompt
    global count_under_run
    global channel
    global channel_num

    incr case_num
    set timeout 15
    send -s "arecord -t $file_type -c $channel_num -f $format -r $rate -d 5 |aplay\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "$channel.*$kernel_prompt" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

# run test case "test_proc" for "total_count" times
# each time, run it with different parametres
proc repeat { test_proc total_count } {
    global sample_rate
    global alsa_format
    global output_file_type

    set count 1
    while {1} {
        foreach rate $sample_rate {
            foreach format $alsa_format {
                send_user "\n$test_proc Round $count: rate $rate; format $format\n\n"
                $test_proc $format $rate $output_file_type
                sleep 1
                set count [expr $count+1]
                if { $count > $total_count } {
                    return
                }
            }
        }
    }
}

spawn mpg123 -Z ./audiotest.mp3
set plaympeg_id $spawn_id

send_user "\nPlease listen to the earphone or amplifier.\n\n"
set spawn_id $kermit_spawn_id 

sleep 10
set timeout 4
send "\n"
expect -re $kernel_prompt

set repeat_count 2
set mem_leak_valve [expr 64*$channel_num*$repeat_count*2]

incr case_num
set timeout 5
send "free\n"
while 1 {
    expect {
        -re "Mem: +\[0-9]+ +\[0-9]+ +(\[0-9]+) +.*$kernel_prompt" {
            set free_mem_start $expect_out(1,string)
            send_user "free_mem_start=$free_mem_start\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

repeat alsa_rec_play $repeat_count

incr case_num
set timeout 5
send "free\n"
while 1 {
    expect {
        -re "Mem: +\[0-9]+ +\[0-9]+ +(\[0-9]+) +.*$kernel_prompt" {
            set free_mem_end $expect_out(1,string)
            set mem_leak [expr $free_mem_end-$free_mem_start]
            send_user "free_mem_end=$free_mem_end, mem_leak=$mem_leak\n"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

repeat alsa_rec2play $repeat_count

while 1 {
    send_user "Duplex testing\n"

    incr case_num
    set timeout 30
    send -s "arecord -t $output_file_type -c $channel_num -f [lindex $alsa_format 0] -r [lindex $sample_rate 0] -d 15 aaa\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Stereo.*$kernel_prompt" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    send -s "aplay aaa &\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Playing WAVE" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
    send -s "\n"
    expect {
        ">" {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "arecord -t $output_file_type -c $channel_num -f [lindex $alsa_format 0] -r [lindex $sample_rate 0] -d 5 bbb\n"
    while 1 {
        expect {
            -re "TUV|UVF|TU|UV|VF|(Hardware Trace:)|dma" {
                incr count_under_run
                expect {
                    -re $kernel_prompt {
                        break
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            -re "Stereo.*$kernel_prompt" {
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    sleep 5
    expect {
        "Input/output error" {
            case_fail $case_num
	}
        timeout {
            send_user "ALSA lib test finish\n"
            case_pass $case_num
            break
        }
    }
}

incr case_num
if { $count_under_run == 0 && $mem_leak >= $mem_leak_valve } {
    send_user "No under run error, but memory leak $mem_leak\n"
    case_fail $case_num
} elseif { $count_under_run > 0 && $mem_leak < $mem_leak_valve } {
    send_user "Under run happened $count_under_run times, no memory leak\n"
    case_fail $case_num
} elseif { $count_under_run > 0 && $mem_leak >= $mem_leak_valve } {
    send_user "Under run happened $count_under_run times, and memory leak $mem_leak\n"
    case_fail $case_num
} else {
    send_user "No under run and memory leak\n"
    case_pass $case_num
}

set spawn_id $plaympeg_id
send "\3\3"
sleep 1

all_pass
send_user "Ending $argv0\n"
log_file
