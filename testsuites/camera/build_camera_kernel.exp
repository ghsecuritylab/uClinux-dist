#!/usr/bin/expect

#
# Build Kernel for Video Capture Driver test
#

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set driver [lindex $argv 1]
send_log "\nVideo Capture Driver is $driver\n"

if { $argc < 2} {
    puts "Please input: board_type, driver name(VS6624 or ADV7183)"
    exit
}


cd $uclinux_path/testsuites
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $uclinux_path/testsuites
step "Make config."
source  make_default_config.exp

cd $uclinux_path/testsuites
step "Make config."
source  make_config_reserve_mem.exp

cd $uclinux_path/testsuites
step "Release L1 space as much as possible"
source make_release_L1.exp

# Following make specific configuration for this case.
cd $uclinux_path
set timeout 300
spawn make config
while 1 {
    expect {
        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -nocase -re "\\\[\[^\r]*] (\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "I2C support.*I2C.*\\\[.*]" {
            send "Y\r"
        }

        -re "GPIO-based bitbanging I2C.*I2C_GPIO.*\\\[.*]" {
            if { $driver == "ADV7183" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin TWI I2C support.*I2C_BLACKFIN_TWI.*\\\[.*]" {
            if { $driver == "VS6624" } {
                send "Y\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin Generic PPI Driver.*BFIN_PPI.*\\\[.*]" {
            send "Y\r"
        }

        -re "Uncached DMA region.*Enable 4M DMA region.*DMA_UNCACHED_4M.*\[cC]hoice\\\[.*]:" {
            send "1\r"
        }

        -re "Multimedia support.*MEDIA_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Video For Linux.*VIDEO_DEV.*\\\[.*]" {
            if { $driver == "VS6624" } {
                send "M\r"
            } else {
                send "Y\r"
            }
        }

        -re "Video capture adapters.*VIDEO_CAPTURE_DRIVERS.*\\\[.*]" {
            send "Y\r"
        }

        -re "ST VS6624 sensor support.*VIDEO_VS6624.*\\\[.*]" {
            if { $driver == "VS6624" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Analog Devices ADV7183 decoder.*VIDEO_ADV7183.*\\\[.*]" {
            if { $driver == "ADV7183" } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "Blackfin Video Capture Driver.*VIDEO_BLACKFIN_CAPTURE.*\\\[.*]" {
            if { $driver == "ADV7183" } {
                send "Y\r"
            } else {
                send "M\r"
            }
        }

        -re "Blackfin PPI Driver.*VIDEO_BLACKFIN_PPI.*\\\[.*]" {
            if { $driver == "ADV7183" } {
                send "Y\r"
            } else {
                send "M\r"
            }
        }

        -re "FFmpeg and FFserver.*USER_FFMPEG_APPS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites
step "Make"
source make_kernel.exp

cd $uclinux_path/testsuites
step "Copy linux"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
