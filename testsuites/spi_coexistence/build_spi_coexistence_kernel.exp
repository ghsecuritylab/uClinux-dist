#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

if { $board_type == "BF537-STAMP" } {
    set board_file $uclinux_path/linux-2.6.x/arch/blackfin/mach-bf537/boards/stamp.c
}

if [ catch {exec sed -i "/modalias.*mmc_spi/,/chip_select/ s/4/1/" $board_file} ] {
    send_user "\nfail to modify board file\n"
    send_user "$errorInfo\n"
    exit
}

set env(EXT2_BLOCKS) "10240"

cd $uclinux_path/testsuites
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $uclinux_path/testsuites
step "Make config."
source make_default_config.exp

# Following make specific configuration for this case.
cd $uclinux_path
set timeout 300
spawn make config
while 1 {
    expect {
        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" { 
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {   
            send "y\r"
        }

        -re "SPI bus lock.*SPI_BFIN_LOCK.*\\\[.*]" {
            send "Y\r"
        }

#spi mmc
        -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "VFAT \\\(Windows-95\\\) fs support.*VFAT_FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "Default codepage for FAT.*FAT_DEFAULT_CODEPAGE.*\\\[.*]" {
            send "850\r"
        }

        -re "Codepage 437.*United States, Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
            send "Y\r"
        }

        -re "Codepage 850.*Europe.*NLS_CODEPAGE_850.*\\\[.*]" {
            send "Y\r"
        }

        -re "NLS ISO 8859-1.*Latin 1; Western European Languages.*NLS_ISO8859_1.*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO card support \\\(MMC\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "MMC/SD/SDIO over SPI.*MMC_SPI.*\\\[.*]" {
            send "Y\r"
        }

        -re "fdisk.*USER_FDISK_FDISK.*\\\[.*]" {
            send "Y\r"
        }

        -re "fdisk.*USER_BUSYBOX_FDISK.*\\\[.*]" {
            send "N\r"
        }

        -re "e2fsck.*USER_E2FSPROGS_E2FSCK_E2FSCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "mke2fs.*USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
            send "Y\r"
        }

        -re "badblocks.*USER_E2FSPROGS_MISC_BADBLOCKS.*\\\[.*]" {
            send "Y\r"
        }

        -re "mkdosfs.*USER_DOSFSTOOLS_MKDOSFS.*\\\[.*]" {
            send "Y\r"
        }

#sound card
        -re "I2C support \\\(I2C\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "Y\r"
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS PCM.*digital audio.*API.*SND_PCM_OSS\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Cascaded AD73322 Audio support for BF53x.*SND_BFIN_AD73322.*\\\[.*]" {
            send "N\r"
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "Y\r"
        }

        -re "SoC I2S Audio for the ADI Blackfin chip.*SND_BF5XX_I2S.*\\\[.*]" {
            send "N\r"
        }

        -re "SoC I2S\\\(TDM mode\\\) Audio for the ADI BF5xx chip.*SND_BF5XX_TDM.*\\\[.*]" {
            send "Y\r"
        }

        -re "AD1836 Audio support for BF5xx.*SND_BF5XX_SOC_AD1836.*\\\[.*]" {
            send "Y\r"
        }

        -re "Set a SPORT for Sound chip.*SND_BF5XX_SPORT_NUM.*\\\[.*]" {
            send "1\r"
        }

        -re "SoC AC97 Audio for the ADI BF5xx chip.*SND_BF5XX_AC97.*\\\[.*]" {
            send "N\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        -re "ALSA utils.*USER_ALSA_UTILS.*\\\[.*]" {
            send "Y\r"
        }

        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
            send "Y\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "Y\r"
        }

        -re "bonnie\\\+\\\+.*USER_BONNIE.*\\\[.*]" {
            send "Y\r"
        }

        -nocase -re "\\\[\[^\r]*] (\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites
step "Make"
source  make_kernel.exp

cd $uclinux_path/testsuites
step "Copy linux"
source   copy_image.exp

send_user "Ending $argv0\n"
log_file
