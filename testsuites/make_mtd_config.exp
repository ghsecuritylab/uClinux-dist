#!/usr/bin/expect

cd $uclinux_path
set timeout 300
spawn make config

while 1 {
    expect {
        -re "Vendor/Product Selection.* (\[0-9]+). AnalogDevices.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Memory Technology Device .*MTD.* support.*MTD.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "MTD partitioning support.*MTD_PARTITIONS.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Direct char device access to MTD devices.*MTD_CHAR.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Caching block device access to MTD devices.*MTD_BLOCK.*\\\[.*]" {
            send -s "Y\r"
        }

#################################################################################
#################################################################################

       -re "mtd-utils.*USER_MTDUTILS.*\\\[.*]" {
            send "Y\r"
        }

        -re "eraseall.*USER_MTDUTILS_ERASEALL.*\\\[.*]" {
            send "Y\r"
        }

        -re "lock.*USER_MTDUTILS_LOCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "unlock.*USER_MTDUTILS_UNLOCK.*\\\[.*]" {
            send "Y\r"
        }

        -re "mkfs.jffs2.*USER_MTDUTILS_MKFSJFFS2.*\\\[.*]" {
            send "Y\r"
        }

         -nocase -re  " \\\(.*\\\) \\\[\[^\r]*] (\[ymn])" {
        }

        -re  " \\\(.*\\\) \\\[\[^\r]*] " {
            send "\r"
            sleep .1
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}
