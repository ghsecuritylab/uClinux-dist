#!/usr/bin/expect

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp
sleep 15
send "\r"
expect -re $kernel_prompt

step "Start testing"
set case_num 0

set timeout 30
incr case_num
if [ catch {exec rcp six_channels.wav root@$targetip:/} ] {
    send_user "\nfail to copy six_channels.wav\n"
    case_fail $case_num
} else {
    case_pass $case_num
}

set timeout 5
incr case_num
send "dmesg |grep -i -c AD1836\r"
while 1 {
    expect {
        -re "AD1836\r\n\[1-9]" {
            set device_arg ""
            case_pass $case_num
            break
        }
        -re "AD1836\r\n0" {
            send "dmesg |grep -i -c AD1980\r"
            while 1 {
                expect {
                    -re "AD1980\r\n\[1-9]" {
                        set device_arg "-D plug:surround51"
                        case_pass $case_num
                        break
                    }
                    -re "AD1980\r\n0" {
                        case_fail $case_num
                    }
                    timeout {
                        case_fail $case_num
                    }
                }
            }
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set count_under_run 0
set timeout 60
incr case_num
send "speaker-test $device_arg -c 6\r"
while 1 {
    expect {
        -re "TUV|UVF|TU|UV|VF" {
            incr count_under_run
            continue
        }
        -re "LFE.*LFE.*LFE.*Time per period" {
            send -s "\3"
            while 1 {
                expect {
                    -re $kernel_prompt {
                        case_pass $case_num
                        break
                    }
                    timeout {
                        send_log "fail to stop speaker-test\n"
                        case_fail $case_num
                    }
                }
            }
            break
        }
        timeout {
            send_log "timeout\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 30
incr case_num
send "aplay $device_arg six_channels.wav;aplay $device_arg six_channels.wav;aplay $device_arg six_channels.wav\r"
while 1 {
    expect {
        -re "TUV|UVF|TU|UV|VF" {
            incr count_under_run
            continue
        }
        -re "Channels 6.*Channels 6.*Channels 6.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send -s "\3"
            send_log "timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
if { $count_under_run == 0 } {
    send_user "No under run error\n"
    case_pass $case_num
} else {
    send_user "Under run error occurs $count_under_run times\n"
    case_fail $case_num
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"
send_user "Ending $argv0\n"

log_file
