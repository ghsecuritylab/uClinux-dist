#!/usr/bin/expect

#
#Test program to test the KGDB patch.
#
source ../kernel_config.exp
source ../board_info.exp

set debug_port "ethernet"

if { $argc >= 2} {
set debug_port [lindex $argv 1]
}

log_file [log_file_name $argv0.$debug_port ]

send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

if { $debug_port == "uart" || $debug_port == "ethernet" } {
send_log "\n#### Debugging is through $debug_port port.\n"
} else {
send_log "\n#### This port $debug_port is not supported. Sorry.\n"
exit
}

step "Start $TITLE\r"

set timeout 10

proc clean_host_gdb { } {

global gdb_id
global sh_prompt

spawn /bin/sh
expect -re  $sh_prompt

set timeout 10
send -s "ps aux | grep bfin-uclinux-gdb\r"
expect {
    -re  $sh_prompt
    timeout
}

send -s "kill -9 `pidof  bfin-uclinux-gdb`\r"
expect {
    -re  $sh_prompt
    timeout
}

}

set case_num 0

set flag 0
send -s "ifconfig eth0 $targetip\r"
sleep 3
expect {
    ">" {
         set flag 1
         puts "ifconfig set success.\n"
    }

    timeout {
         puts "Fail ifconfig. "
    }
}

#incr case_num
#send -s "modprobe  kgdb_test\r"
#    expect {
#        -re "$kernel_prompt" {
#                case_pass $case_num
#		}
#		timeout {
#                case_fail $case_num
#			exit
#		}
#}
#send -s "cat  /proc/modules\r"
#    expect {
#        -re "kgdb_test.*(0x\[0-9a-fA-F]+)\r\n$kernel_prompt" {
#                set kgdb_test_symbol_addr $expect_out(1,string) 
#                case_pass $case_num
#		}
#		timeout {
#                case_fail $case_num
#			exit
#		}
#}

if { $debug_port == "uart" } {
send -s "\x81"
send -s "b"
send -s "g"
sleep 3
expect {
    -re "SysRq : GDB.*Entering KGDB" {
        send_log "Prepare KGDB through uart port debug!"
    }

    timeout {
        send_user "ERROR: enter to kgdb error\n"
    }
}
}

incr case_num
#spawn bfin-uclinux-gdb /tftpboot/vmlinux
spawn bfin-uclinux-gdb $uclinux_path/linux-2.6.x/vmlinux
set gdb_id $spawn_id
expect {
	"(gdb)" {
                case_pass $case_num
        }
        timeout {
                case_fail $case_num
		exit
        }
}

while 1 {
	incr case_num
        if { $debug_port == "ethernet" } {
	send -s "target remote udp:$targetip:6443\r"
	expect {
		"Remote debugging using udp*kgdb_breakpoint" {
                 case_pass $case_num
			expect { 
				"(gdb) " {
				}
			}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        } elseif { $debug_port == "uart" } {
        send -s "set remotebaud 57600\r"
        expect {
                "(gdb)" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                exit
                }
        }
        send -s "target remote $ttyUSBdev\r"
        expect {
                "Remote debugging using $ttyUSBdev*kgdb_breakpoint" {
                 case_pass $case_num
                        expect {
                                "(gdb) " {
                                }
                        }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        }
#	incr case_num
#	send -s "add-symbol-file $uclinux_path/linux-2.6.x/arch/blackfin/kernel/kgdb_test.ko $kgdb_test_symbol_addr \r"
#	expect {
#               "add symbol table from file*(y or n)" {
#                send -s "y\r"
#                case_pass $case_num
#                        expect {
#                                "(gdb) " {
#                                }
#                        }
#                }
#		timeout {
#                clean_host_gdb
#                case_fail $case_num
#			exit
#		}
#	}
	incr case_num
	send -s "break kgdb_test\r"
	expect {
		"Breakpoint 1" {
                case_pass $case_num
			expect { 
				"(gdb) " {
				}
			}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
                case_pass $case_num
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	set spawn_id $kermit_spawn_id
	send "\r"
	expect {
		"> " {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
###########################################################################
# First round of cat /proc/kgdbtest which is for normal DRAM.

	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 1" {
                case_pass $case_num
		expect { 
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        incr case_num
        send -s "hbreak 58\r"
        expect {
                "Hardware assisted breakpoint 2*(gdb) " {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
        send "info b\r"
        expect {
               "1   breakpoint*2   hw breakpoint" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

	incr case_num
	send "list\r"
	expect {
		"(gdb) " {
                case_pass $case_num
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "bt\r"
	expect {
		"kgdb_test" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	set spawn_id $kermit_spawn_id
    #    set timeout 5
	expect {
		"hello world!" {
		expect {
		"> " {
                clean_host_gdb
                case_fail $case_num
                        exit
		}
               timeout {
                case_pass $case_num
                }
		}
		}
	}
        incr case_num
        set spawn_id $gdb_id
        expect {
                "Breakpoint 2" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
        send "print z\r"
        expect {
               -re "\\\$1 = " {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        send "c\r"
        expect {
                "Continuing." {
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $kermit_spawn_id
        expect {
              -re  "L1.*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*L1\\\(after change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
######################################################################################
#Second round of running cat /proc/kgdbtest which is running in L1.

	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 1" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "hbreak kgdb_l1_test\r"
	expect {
	  -re	"\[Bb]reakpoint 3 at 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        incr case_num
        send "break 33\r"
        expect {
              -re  "Breakpoint 4 at 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 2, kgdb_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        set spawn_id $kermit_spawn_id
        expect {
                "hello world!" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }
        set spawn_id $gdb_id
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 3, kgdb_l1_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
        send "print num1\r"
        expect {
              -re  "\\\$2 = 10" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 4, kgdb_l1_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
       
        incr case_num
        send "print num1\r"
        expect {
              -re  "\\\$3 = 20" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	set spawn_id $kermit_spawn_id
	expect {
              -re  "L1.*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*>" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }

       set spawn_id $gdb_id

        incr case_num
        send " x/1xw 0xff808010\r"
        expect {
                "Cannot access memory at address" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        incr case_num
        send "set *0xff808020 = 23\r"
        expect {
                "Cannot access memory at address" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        incr case_num
        # Read the uart0 register.
        send " x/1xw 0xffc00400\r" 
        expect {
           -re "0xffc00400:\[\x20\t]+0x\[0-9a-fA-F]{8}\[\r\n]" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        incr case_num
        # Set the performance register.
        send "set *0xffe08100=0x456\r" 
        expect {
                "(gdb)" {
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        send " x/1xw 0xffe08100\r"
        expect {
           -re "0xffe08100:\[\x20\t]+0x00000456" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

	incr case_num
	send "d 1\r"
	send "d 2\r"
	send "info break\r"
	expect {
		"1   breakpoint" {
                case_fail $case_num
			exit
		}
		"2   hw breakpoint" {
                case_fail $case_num
			exit
		}
		"3  *breakpoint*4  *breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}

	incr case_num
	send "info reg\r"
	expect {
		-re "pc\[\x20\t]+(0x\[0-9a-fA-F]+)" {
                        set reg_addr_before $expect_out(1,string)
                        puts "\nreg_addr_before $reg_addr_before \n"
		}
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                        puts "\nreg_addr_before timeout! \n"
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
                        case_pass $case_num
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

	incr case_num
        send "disassemble\r"
        expect {
		-re "$reg_addr_before.*\[\r\n]?.*\[\r\n](0x\[0-9a-fA-F]{8})" {
                          set reg_addr_after1 $expect_out(1,string)
                          puts "\nreg_addr_after1 $reg_addr_after1 \n"
                }
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
                          case_pass $case_num
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

        incr case_num
        send "si\r"
        expect {
                "(gdb) " {
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

	incr case_num
	send "info reg\r"
	expect {
		-re "pc\[\x20\t]+(0x\[0-9a-fA-F]+)" {
                        set reg_addr_after2 $expect_out(1,string)
                        puts "\nreg_addr_after2 $reg_addr_after2 \n"
		}
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                        puts "\nreg_addr_after timeout! \n"
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
			if { 0 == [expr $reg_addr_after2 - $reg_addr_after1] } {
                            case_pass $case_num
			    send_user "\nSI case pass!\n"
			} else {
			    send_user "\n"
			    case_fail $case_num
			}
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

	incr case_num
	send "print len\r"
	expect {
	      -re  "\\\$4 =" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
       set spawn_id $kermit_spawn_id
        expect {
              ">" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

###########################################################################################
# Set the round number to 2. Don't change it for it is related to num2 values behind.
for { set j 0 } { $j < 2 } { incr j 1 } {
        send_user "\n######## Kgdb stress test: this is the [expr $j + 3] round.#########\n "
       
        set spawn_id $kermit_spawn_id
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 3" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}

        set spawn_id $kermit_spawn_id
        incr case_num
        expect {
                "hello world!" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $gdb_id
        incr case_num
        send "c\r"
        expect {
        "Continuing." {
           expect {
              "Breakpoint 4, kgdb_l1_test*(gdb)" {
              }
              timeout {
              set spawn_id $kermit_spawn_id
              expect {
              -re  "L1\\\(before change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
              send_user "!!!!!!!! Breakpoint 4 has been skipped. Error!"
              }
              }
              clean_host_gdb
              case_fail $case_num
              exit
              }
           }
        }

        timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
        }
        }

       set spawn_id $kermit_spawn_id
        expect {
              -re  "L1\\\(before change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }

        set spawn_id $gdb_id
        send "c\r"
        expect {
                "Continuing." {
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

}
######################################################################################
#This round of running cat /proc/kgdbtest is for l2.
if { $board_type == "BF548-EZKIT" || $board_type == "BF561-EZKIT" } {

        set spawn_id $kermit_spawn_id
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 3" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        set spawn_id $kermit_spawn_id
        expect {
                "hello world!" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }
        set spawn_id $gdb_id
	incr case_num
	send "break kgdb_l2_test\r"
	expect {
	  -re	"Breakpoint 5 at 0xfeb0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        incr case_num
        send "hbreak 48\r"
        expect {
              -re  "Hardware assisted breakpoint 6 at 0xfeb0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
	send "info break\r"
	expect {
		"*breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        incr case_num
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 4, kgdb_l1_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $kermit_spawn_id
        incr case_num
        expect {
              -re  "L1\\\(before change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $gdb_id
        incr case_num
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 5, kgdb_l2_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
        send "print num2\r"
        expect {
              -re  "\\\$5 = 80" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 6, kgdb_l2_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        incr case_num
        send "print num2\r"
        expect {
              -re  "\\\$6 = 100" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	set spawn_id $kermit_spawn_id
	expect {
              -re  "L2\\\(before change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }

 	set spawn_id $gdb_id
        incr case_num
        send " x/1xw 0xfeb28010\r"
        expect {
                "Cannot access memory at address" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        incr case_num
        send "set *0xfeb28020 = 23\r"
        expect {
                "Cannot access memory at address" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	incr case_num
	send "d 5\r"
	send "d 6\r"
	send "info break\r"
	expect {
		"5   breakpoint" {
                case_fail $case_num
			exit
		}
		"6   hw breakpoint" {
                case_fail $case_num
			exit
		}
		"3  *breakpoint*4  *breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "info reg\r"
	expect {
		-re "pc\[\x20\t]+(0x\[0-9a-fA-F]+)" {
                        set reg_addr_before $expect_out(1,string)
                        puts "\nreg_addr_before $reg_addr_before \n"
		}
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                        puts "\nreg_addr_before timeout! \n"
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
                        case_pass $case_num
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

	incr case_num
        send "disassemble\r"
        expect {
		-re "$reg_addr_before.*\[\r\n]?.*\[\r\n](0x\[0-9a-fA-F]{8})" {
                          set reg_addr_after1 $expect_out(1,string)
                          puts "\nreg_addr_after1 $reg_addr_after1 \n"
                }
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
                          case_pass $case_num
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

        incr case_num
        send "si\r"
        expect {
                "(gdb) " {
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

	incr case_num
	send "info reg\r"
	expect {
		-re "pc\[\x20\t]+(0x\[0-9a-fA-F]+)" {
                        set reg_addr_after2 $expect_out(1,string)
                        puts "\nreg_addr_after2 $reg_addr_after2 \n"
		}
		"to quit---" {
			send "\r"
			exp_continue
		}
                timeout {
                        puts "\nreg_addr_after timeout! \n"
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	expect {
		"to quit---" {
			send "\r"
			exp_continue
		}
		"(gdb) " {
			if { 0 == [expr $reg_addr_after2 - $reg_addr_after1] } {
                            case_pass $case_num
			    send_user "\nSI case pass!\n"
			} else {
			    send_user "\n"
			    case_fail $case_num
			}
		}
		timeout {
		clean_host_gdb
		case_fail $case_num
			exit
		}
	}

	incr case_num
	send "print len\r"
	expect {
	      -re  "\\\$7 =" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 6, kgdb_l2_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }

        set spawn_id $kermit_spawn_id
        incr case_num
        expect {
                ">" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
}
###########################################################################################
# The last round.
        set spawn_id $kermit_spawn_id
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 3" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}

        set spawn_id $kermit_spawn_id
        incr case_num
        expect {
                "hello world!" {
                case_pass $case_num
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $gdb_id
        incr case_num
        send "c\r"
        expect {
                "Continuing." {
                 expect {
                        "Breakpoint 4, kgdb_l1_test*(gdb)" {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
        set spawn_id $kermit_spawn_id
        expect {
              -re  "L1\\\(before change\\\).*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]" {
                expect {
                "> " {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
               timeout {
                case_pass $case_num
                }
                }
                }
        }
        set spawn_id $gdb_id
        send "info break\r"
        expect {
                "1   breakpoint" {
                case_fail $case_num
                        exit
                }
                "2   hw breakpoint" {
                case_fail $case_num
                        exit
                }
                "3  *breakpoint*4  *breakpoint" {
                case_pass $case_num
                expect {
                        "(gdb) " {
                        }
                }
                }
                timeout {
                clean_host_gdb
                case_fail $case_num
                        exit
                }
        }
	incr case_num
	send "d\r"
	expect {
		"Delete all breakpoints? (y or n)" {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	send "y\r"
	expect {
		"(gdb) " {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	send "info break\r"
	expect {
		"No breakpoints or watchpoints." {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	set spawn_id $kermit_spawn_id
	expect {
		"> " {
		}
	}
	incr case_num
	set spawn_id $gdb_id
        sleep 3
	send "\3"
	expect {
		"breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "detach\r"
	expect {
		"Ending remote debugging." {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	send "q\r"
	set spawn_id $kermit_spawn_id
	incr case_num
	send "\r"
	expect {
		"> " {
                case_pass $case_num
			break
		}
		timeout {
                clean_host_gdb
                case_fail $case_num
			exit
		}
	}
	
}
   
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file

