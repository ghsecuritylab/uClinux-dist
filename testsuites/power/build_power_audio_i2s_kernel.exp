#!/usr/bin/expect --

#
# Build Kernel for power test with I2S Audio (SSM2602/AD73311/ADAU1373)
#

source ../kernel_config.exp
source ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $uclinux_path/testsuites
step "Make default config."
source  make_default_config.exp

step "Make config"
cd $uclinux_path
set timeout 300
spawn make config
while 1 {
    expect {
        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            #USB driver now doesn't support power function
            send "N\r"
        }


#Power Management
        -re "Power Management support \\\(PM\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Suspend to RAM and standby \\\(SUSPEND\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Allow Wakeup from Standby by GPIO.*PM_WAKEUP_BY_GPIO.*\\\[.*]" {
            send "N\r"
        }


#Audio Output
        -re "SHARP LQ035Q1DH02 TFT LCD.*FB_BFIN_LQ035Q1.*\\\[.*]" {
            #LQ035Q1 conflicts with ssm2603
            if { $board_type == "BF527-EZKIT-V2" } {
                send "N\r"
            } else {
                send "\r"
            }
        }

        -re "I2C support \\\(I2C\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" || [string match "BF527-EZKIT*" $board_type] || $board_type == "BF548-EZKIT" } {
                send "Y\r"
            } else {
                send "N\r"
            }
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS PCM .*digital audio.* API .*SND_PCM_OSS\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Generic sound devices.*SND_DRIVERS.*\\\[.*]" {
            send "N\r"
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "Y\r"
        }

        -re "SoC I2S Audio for the ADI Blackfin chip.*SND_BF5XX_I2S.*\\\[.*]" {
            send "M\r"
        }

        -re "SoC SSM2602 Audio Codec Add-On Card support.*SND_BF5XX_SOC_SSM2602.*\\\[.*]" {
            send "M\r"
        }

        -re "AD73311.*Audio support for Blackfin.*SND_BF5XX_SOC_AD73311.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC ADAU1373 Audio support.*SND_BF5XX_SOC_ADAU1373.*\\\[.*]" {
            send "N\r"
        }

        -re "SoC ADAU1761 Audio support.*SND_BF5XX_SOC_ADAU1761.*\\\[.*]" {
            send "M\r"
        }

        -re "SoC I2S\\\(TDM mode\\\) Audio for the ADI BF5xx chip.*SND_BF5XX_TDM.*\\\[.*]" {
            send "N\r"
        }

        -re "SoC AC97 Audio for the ADI BF5xx chip.*SND_BF5XX_AC97.*\\\[.*]" {
            send "N\r"
        }

        -re "Set a SPORT for Sound chip.*SND_BF5XX_SPORT_NUM.*\\\[.*]" {
            if { [string match "BF527-EZKIT*" $board_type] } {
                send "1\r"
            } else {
                send "0\r"
            }
        }

        -re "Uncached DMA region.*(\[0-9]). Enable 2M DMA region.*DMA_UNCACHED_2M.*\[cC]hoice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        -re "ALSA utils.*USER_ALSA_UTILS.*\\\[.*]" {
            send "Y\r"
        }

        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
            send "Y\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "Y\r"
        }

        -re "rtcwake.*USER_BUSYBOX_RTCWAKE.*\\\[.*]" {
            send "Y\r"
        }

        -nocase -re "\\\[\[^\r]*] (\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites
step "Make kernel"
source make_kernel.exp

cd $uclinux_path/testsuites
step "Copy linux image"
source copy_image.exp

send_user "Ending $argv0\n"
log_file
