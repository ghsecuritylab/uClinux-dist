#!/usr/bin/expect --

#
# Build Kernel for power test
#

source  ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"


if { $argc < 2} {
    puts "Please input: board_type, whether include ad1981b(yes or no)"
    exit
}
set ad1981b_flag [lindex $argv 1]
send_log "\ninclude ad1981b: $ad1981b_flag\n"


cd $uclinux_path/testsuites
step "Make default config."
source  make_default_config.exp

step "Make config"
cd $uclinux_path
set timeout 300
spawn make config

while 1 {
    expect {
        -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Virtual terminal.*VT.*\\\[.*]" {
            send "N\r"
        }

        -re "USB support.*USB_SUPPORT.*\\\[.*]" {
            #USB driver now doesn't support power function
            send "N\r"
        }


#Power Management
        -re "Power Management support \\\(PM\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Suspend to RAM and standby \\\(SUSPEND\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Cause Wakeup Event by GPIO \\\(PM_WAKEUP_BY_GPIO\\\) \\\[.*]" {
            send "N\r"
        }


#Video Output
        -re "Support for generic platform NAND driver.*MTD_NAND_PLATFORM.*\\\[.*]" {
            #conflict with TFT LCD
            send "N\r"
        }

        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            send "M\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            if { $board_type == "BF533-EZKIT" } {
                send "N\r"
            } else {
                send "Y\r"
            }
        }

        -re "SHARP LQ035 TFT LCD.*FB_BF537_LQ035.*\\\[.*]" {
            send "M\r"
        }

        -re "SHARP LQ043 TFT LCD.*BF548 EZKIT.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "M\r"
            } else {
                send "\r"
            }
        }

        -re "Varitronix COG-T350MCQB TFT LCD display.*FB_BFIN_T350MCQB.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "\r"
            }
        }

        -re "Blackfin ADV7393 Video encoder on uClinux.*FB_BFIN_7393.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            if { $board_type == "BF533-EZKIT" } {
                send "N\r"
            } else {
                send "Y\r"
            }

        }


#Audio Output
        -re "Sound card support.*SOUND.*\\\[.*]" {
            if { $board_type == "BF533-EZKIT" } {
                send "N\r"
            } else {
                send "Y\r"
            }
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "Y\r"
        }

        -re "OSS PCM .*digital audio.* API .*SND_PCM_OSS\\\).*\\\[.*]" {
            send "Y\r"
        }

        -re "Generic sound devices.*SND_DRIVERS.*\\\[.*]" {
            send "N\r"
        }

        -re "AD1836 Audio support for BF53x.*SND_BLACKFIN_AD1836.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "M\r"
        }

        -re "SoC I2S Audio for the ADI BF5xx chip.*SND_BF5XX_I2S.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" || $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC SSM2602 Audio support for BF52x ezkit.*SND_BF5XX_SOC_SSM2602.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" && $ad1981b_flag == "no" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC AD73311 Audio support for Blackfin.*SND_BF5XX_SOC_AD73311.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SoC AC97 Audio for the ADI BF5xx chip.*SND_BF5XX_AC97.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" || $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Enable MMAP Support.*SND_BF5XX_MMAP_SUPPORT.*\\\[.*]" {
            send "N\r"
        }

        -re "SoC AD1980/1 Audio support for BF5xx.*SND_BF5XX_SOC_AD1980.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" || $board_type == "BF548-EZKIT" || $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Set a SPORT for Sound chip.*SND_BF5XX_SPORT_NUM.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" && $ad1981b_flag == "yes" } {
                send "1\r"
            } else {
                send "\r"
            }
        }

        -re "Uncached DMA region.*Enable 2M DMA region.*DMA_UNCACHED_2M.*\[cC]hoice\\\[.*]:" {
            send "2\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        -re "ALSA utils.*USER_ALSA_UTILS.*\\\[.*]" {
            send "Y\r"
        }

        -re "tone.*USER_PLAY_TONE.*\\\[.*]" {
            send "Y\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "Y\r"
        }

        -re "rtcwake.*USER_BUSYBOX_RTCWAKE.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites

step "Make kernel"

source   make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux image"

source   copy_image.exp

send_user "Ending $argv0\n"

log_file
