#!/usr/bin/expect

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp
sleep 10
set timeout 5
send "\r"
expect -re $kernel_prompt

step "Start testing"
set case_num 0
set hd_dev sda2

set timeout 5
incr case_num
send "mkdir /mnt/rootfs; ls /dev/$hd_dev\r"
while 1 {
    expect {
        -nocase -re "(mkdir:|ls:|fail|error|no such).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 180
incr case_num
send "mke2fs /dev/$hd_dev\r"
while 1 {
    expect {
        -re "Hardware Trace.*$kernel_prompt" {
            case_fail $case_num
        }
        -re "done.*Writing superblocks.*done.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/$hd_dev /mnt/rootfs\r"
while 1 {
    expect {
        -nocase -re "(mount:|fail|error|no such).*$kernel_prompt" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send_user "rcp ../runcp.sh root@$targetip:/."
if [ catch {exec rcp ../runcp.sh root@$targetip:/.} ] {
    send_user "$errorInfo\n"
    case_fail $case_num
}

set timeout 60
incr case_num
send "./runcp.sh\r"
while 1 {
    expect {
        -re "copy rootfs done.*$kernel_prompt" {
            send_user "finish to copy rootfs to harddisk\n"
            case_pass $case_num
            break
        }
        eof {
            break
        }
        timeout {
            send_user "copy rootfs to harddisk timeout\n"
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "umount /mnt/rootfs\r"
while 1 {
    expect {
        -re "cannot umount.*$kernel_prompt" {
            send_user "umount /mnt/rootfs fail, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount /mnt/rootfs done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount /mnt/rootfs timeout, test fail\n"
            case_fail $case_num
        }
    }
}

sleep 5
incr case_num
send "reboot\r"
set timeout 60
while 1 {
    expect {
        "Hit any key " {
            send "\r"
            break
        }

        timeout {
            send_user "failed reset attemp\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 20
send -s "setenv hdargs setenv bootargs root=/dev/$hd_dev rw console=ttyBF$def_uart_port,$baud_rate\r"
expect ">"
send -s "setenv hdboot \'tftpboot 0x1000000 $compressed_kernel_only_image; run hdargs; run addip; bootm\'\r"
expect ">"
send -s "save\r"
while 1 {
    expect {
        -re "sectors|done.*>" {
            send_user "save!!!\n"
            break
        }
        timeout {
            send_user "save timeout!!!\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 180
send -s "run hdboot\r"
while 1 {
    expect {
        -re "Kernel panic" {
            send_user "kernel panic detected..."
            case_fail $case_num
        }

        -re $kernel_prompt {
            send_user "successful boot attempt"
            case_pass $case_num
            break
        }

        timeout {
            send_user "failed boot attempt"
            case_fail $case_num
        }
    }
}

sleep 20

incr case_num
set timeout 5
send "dmesg|grep VFS\r"
while 1 {
    expect {
        -re "VFS\\\: Mounted root \\\(ext2 filesystem\\\).*$kernel_prompt" {
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}
send "ls /\r"
while 1 {
    expect {
        -re "runcp\\\.sh.*$kernel_prompt" {
            send_user "successfully mount harddisk as the root filesystem\r"
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 20
send "ffmpeg -r 20 -f video4linux2 -s 320x240 -i /dev/video0 -vcodec mpeg4 -f mp4 usb_camera.mp4\r"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Stream mapping.*kbits/s" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 10

incr case_num
set timeout 10
send "q"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "video.*audio.*global headers.*muxing overhead.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

send "export SDL_NOMOUSE=1\n"
expect -re $kernel_prompt

incr case_num
set timeout 10
send "ffplay usb_camera.mp4\n"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re "Video: mpeg4, yuv420p, 320x240.*A-V:" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 9

incr case_num
set timeout 8
send -s "\3"
while 1 {
    expect {
        -re "\[eE]rror|\[fF]ail|Hardware Trace|SIGSEGV" {
            case_fail $case_num
        }
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send_user "\nrcp root@$targetip:/usb_camera.mp4 .\n"
if [ catch {exec rcp root@$targetip:/usb_camera.mp4 .} ] {
    send_user "FAIL: rcp video file to host PC\n"
    send_user "$errorInfo\n"
    case_fail $case_num
} else {
    send_user "PASS: rcp video file to host PC\n"
    case_pass $case_num
}

all_pass
send_user "Ending $argv0\n"
log_file
