#!/usr/bin/expect

source  ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set case_num 0
set manual 0
set timeout 30
expect "SCSI removable disk"
send "\r"

set timeout 10
incr case_num
if { $board_type == "BF548-EZKIT" } {
    set module "bf54x_lq043fb"
} elseif {$board_type == "BF527-EZKIT" } {
    set module "bfin_t350mcqb_fb"
} elseif {$board_type == "BF527-EZKIT-V2" } {
    set module "bfin_lq035q1_fb"
} elseif { $board_type == "BF537-STAMP" } {
    set module "bf537_lq035"
} else {
    send_user "Wrong board type!\n"
    case_fail $case_num
}
send "modprobe $module\r"
while 1 {
    expect {
        -re "(\[eE]rror|\[fF]ail).*$kernel_prompt" {
            case_fail $case_num
        }
        -re "initializ.*$kernel_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            send_user "install lcd module timeout, test fail\n"
            case_fail $case_num
        }
    }
}

sleep 5

set timeout 5
incr case_num
send -s "nano-X &\r"
while 1 {
    expect {
        -re "\[0-9]+" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            send_user "nano-X timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "nanowm &\r"
while 1 {
    expect {
        -re "\[0-9]+" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            send_user "nanowm timeout, test fail\n"
            case_fail $case_num
        }
    }
}

incr case_num
send "nxclock\r"
set timeout 30
if { $manual == 1 } {
    send_user "Have you seen a clock on LCD screen?\nIf true, type y; if false, type n:"
    while 1 {
        expect_user {
            -re "\[nN]" {
                send_user "\nnxclock failed, test fail\n"
                case_fail $case_num
            }
            -re "\[yY]" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "nxclock timeout, test fail\n"
                case_fail $case_num
            }
        }
    }
} else {
    while 1 {
        expect {
            -re "\r\n\[a-zA-Z0-9]" {
                send_user "\nnxclock failed\n"
                send -s "\3"
                case_fail $case_num
            }
            timeout {
                case_pass $case_num
                break
            }
        }
    }
}

set timeout 10
incr case_num
send -s "\3"
while 1 {
    expect {
        -re "nano-X: client closed socket: \[0-9]" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            send_user "terminate nxclock timeout, test fail\n"
            case_fail $case_num
        }
    }
}

send "\n"
expect -re $kernel_prompt
sleep 1

incr case_num
send "nxkbd\r"
set timeout 30
if { $manual == 1 } {
    send_user "Have you seen a keyboard on LCD screen?\nIf true, type y; if false, type n:\n"
    while 1 {
        expect_user {
            -re "\[nN]" {
                send_user "nxkbd failed, test fail\n"
                case_fail $case_num
            }
            -re "\[yY]" {
                case_pass $case_num
                break
            }
            timeout {
                send_user "nxkbd timeout, test fail\n"
                case_fail $case_num
            }
        }
    }
} else {
    while 1 {
        expect {
            -re "\r\n\[a-zA-Z0-9]" {
                send_user "\nnxkbd failed\n"
                send -s "\3"
                case_fail $case_num
            }
            timeout {
                case_pass $case_num
                break
            }
        }
    }
}

set timeout 10
incr case_num
send -s "\3"
while 1 {
    expect {
        -re "nano-X: client closed socket: \[0-9]" {
            expect -re $kernel_prompt
            case_pass $case_num
            break
        }
        timeout {
            send_user "terminate nxclock timeout, test fail\n"
            case_fail $case_num
        }
    }
}

all_pass
send_user "Ending $argv0\n"
log_file
