#!/usr/bin/expect --

#
# Build Kernel for MicroWin driver test
#

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set env(EXT2_BLOCKS) "12288"

cd $uclinux_path/testsuites
step "Make clean."
if { [source make_clean.exp] != 0 } {
    send_user "\n\nFail to make clean. Exit!\n\n"
    exit
}

cd $uclinux_path/testsuites
step "Make config."
source  make_default_config.exp

# Following make specific configuration for this case.
cd $uclinux_path
set timeout 300
spawn make config
while 1 {
    expect {
        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -nocase -re "\\\[\[^\r]*] (\[ymn])|choice\\\[.*]: \[0-9]+\r" {
            continue
        }

        -re "Support for generic platform NAND driver.*MTD_NAND_PLATFORM.*\\\[.*]" {
            #conflict with TFT LCD
            send "N\r"
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            send "Y\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send "Y\r"
        }

        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT-V2" } {
                send "Y\r"
            } else {
                send "M\r"
            }
        }

        -re "SHARP LQ043 TFT LCD.*BF548 EZKIT.*\\\[.*]" {
            if { $board_type == "BF548-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SHARP LQ035 TFT LCD.*FB_BF537_LQ035.*\\\[.*]" {
            send "M\r"
        }

        -re "Varitronix COG-T350MCQB TFT LCD display.*FB_BFIN_T350MCQB.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "SHARP LQ035Q1DH02 TFT LCD.*FB_BFIN_LQ035Q1.*\\\[.*]" {
            if { $board_type == "BF527-EZKIT-V2" } {
                send "M\r"
            } else {
                send "N\r"
            }
        }

        -re "Build freetype.*LIB_FREETYPE.*\\\[.*]" {
            send "Y\r"
        }

        -re "MicroWindows \\\(USER_MICROWIN\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Optimize.*USER_MICROWIN_OPTIMIZE.*\\\[.*]" {
            send "Y\r"
        }

        -re "Microwin \\\(USER_MICROWIN_MICROWIN\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "NanoX \\\(USER_MICROWIN_NANOX\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "MicrowinDemo \\\(USER_MICROWIN_MICROWINDEMO\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "NanoXDemo \\\(USER_MICROWIN_NANOXDEMO\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "NanoWM.*USER_MICROWIN_NANOWM.*\\\[.*]" {
            send "Y\r"
        }

        -re "Screeen PixType.*Packed.*choice.*\\\[.*]" {
            #here we choose Packed-8bit-Palette
            send "4\r"
        }

        -re "Have File IO.*USER_MICROWIN_HAVE_FILEIO.*\\\[.*]" {
            send "Y\r"
        }

        -re "Frame Buffer Display \\\(USER_MICROWIN_FRAMEBUFFER\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "No Mouse \\\(USER_MICROWIN_NOMOUSE\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "No Keyboard \\\(USER_MICROWIN_NOKBD\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "Nano-X \\\(USER_MICROWIN_BIN_NANO_X\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "NanoWM \\\(USER_MICROWIN_BIN_NANOWM\\\) \\\[.*]" {
            send "Y\r"
        }

        -re "NXclock.*\\\[.*]" {
            send "Y\r"
        }

        -re "NXkbd.*\\\[.*]" {
            send "Y\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        -re "VIDEO test program.*USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
            send "Y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .05
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}

cd $uclinux_path/testsuites
step "Make"
source make_kernel.exp

cd $uclinux_path/testsuites
step "Copy linux"
source copy_image.exp

log_file
