#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

set module_name hello.ko

step "Start testing."

set case_num 0
incr case_num

set timeout 2
step "Clean src directory\n"
spawn make clean
while 1 {
   expect {

      "*error*" {
         send_log "\nMake clean failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nMake clean.\n"
         send_user "\nMake clean.\n"
         break
      }

      timeout {
         break
      }
   }
}

step "Build test program\n"
spawn make
while 1 {
   expect {

      "*error*" {
         send_log "\nBuild test program failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nBuild test program done\n"
         case_pass $case_num
         break
      }

      timeout {
         break
      }
   }
}

if [ file exists $module_name ] {
send_user "$module_name has been built out.\n "
}

set spawn_id $kermit_spawn_id

sleep 3
send "\r"
expect  -re $kernel_prompt

send "ifconfig eth0 $targetip up\r"
while 1 {
   sleep 3
   expect {
      ">" {
         send_log "ifconfig set.\n"
         break
      }

      timeout {
         send_log "Fail ifconfig. "
         break
         }
     }
}

send "ifconfig \r"
while 1 {
   sleep 3
   expect {
      "$targetip" {
         send_log "ifconfig set success.\n"
         break
      }

      timeout {
         send_log "Fail ifconfig. "
         break
         }
     }
}

set timeout 10
step "Copy testcase to target board\n"
spawn rcp $module_name root@$targetip:/
while 1 {
   expect {

      "*connect*" {
         send_log "\nCopy $module_name to target board failed\n"
         case_fail $case_num
      }

      eof {
         send_log "\nCopy $module_name to target board done\n"
         break
      }

      timeout {
         break
      }
   }
}

set insert_output      "code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f].*\[\r\n]"
append insert_output ".*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], data value is 0.*\[\r\n]"
append insert_output ".*bss  variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], bss value is 0.*\[\r\n]"
append insert_output ".*data variable addr = 0xff90\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], data value is 0.*\[\r\n]"
append insert_output ".*bss  variable addr = 0xff90\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], bss value is 0"

set spawn_id $kermit_spawn_id
send "insmod $module_name\r" 
while 1 {   
         expect {
	 -re "$insert_output" {
                case_pass $case_num
		break
	 }
	  
	  timeout {
                case_fail $case_num
	   exit
	 }
	 }
}

incr case_num

expect ">"
send "lsmod\r" 
while 1 {
   expect {
     -re "hello" {
        
                case_pass $case_num
         break
      }

      timeout {
                case_fail $case_num
	exit
         }
     }
}

incr case_num

expect  -re $kernel_prompt
send "rmmod $module_name \r" 

set timeout 5
expect  -re $kernel_prompt
send "lsmod\r" 
while 1 {
   expect {
   
      "hello" {
                case_fail $case_num
	exit
         }
	 
     timeout {
                case_pass $case_num
         break
      }
     
     }
}

  
send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file
