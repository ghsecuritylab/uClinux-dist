#!/usr/bin/expect

source ../kernel_config.exp

if { $argc >= 2} {
    set extra_config [lindex $argv 1]
}

set extra_config "normal"
log_file [log_file_name $argv0.$extra_config ]

if { $extra_config == "in_buffer" || $extra_config == "normal" } {
    send_user "\n#### Extra config is $extra_config.\n"
} else {
    send_user "\n#### This config $extra_config is not supported. Sorry.\n"
    exit
}

set TITLE [title "$argv0"]
append TITLE " ($extra_config)"

send_user "Starting $argv0\n"

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start testing."
set TransRate  0
set Throughput  0
set test_time 600
set case_num 0

sleep 10

incr case_num
set timeout 8
send "ifconfig eth0 $targetip\r"
expect -re $kernel_prompt

spawn /bin/sh
send "\r"
expect -re $sh_prompt

incr case_num
set timeout 5
send "ps aux|grep netserver|grep -v grep\r"
while 1 {
    expect {
        -re "\\\?.*netserver.*$sh_prompt" {
            send "pkill -9 netserver\r"
            expect -re $sh_prompt
            case_pass $case_num
            break
        }
        -re $sh_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "netserver\r"
while 1 {
    expect {
        -re "Starting netserver.*AF_UNSPEC.*$sh_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
send "ps aux|grep netserver|grep -v grep\r"
while 1 {
    expect {
        -re "\\\?.*netserver.*$sh_prompt" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set netserver_id $spawn_id

set spawn_id $kermit_spawn_id
send "cd\r"
expect -re $kernel_prompt

incr case_num
set timeout 2000
send "netperf -H $serverip -t TCP_RR -l $test_time > netperf_tcp_rr\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 2000
send "netperf -H $serverip -t TCP_STREAM -l $test_time > netperf_tcp_stream\r"
while 1 {
    expect {
        -re $kernel_prompt {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send  "cat netperf_tcp_rr\r"
while 1 {
   expect {
      -re "$test_time\\\.\[0-9]{2} +(\[0-9]+\\\.\[0-9]{2})" {
         set TransRate $expect_out(1,string)
	 expect -re $kernel_prompt
	 send_log "TransRate $expect_out(1,string)\n"
         break
      }

      timeout {
           case_fail $case_num
           break
         }
     }
}

incr case_num
set timeout 10
send "cat netperf_tcp_stream\r"
while 1 {
    expect {
        -re "$test_time\\\.\[0-9]{2} +(\[0-9]+\\\.\[0-9]{2})" {
            set Throughput $expect_out(1,string)
            expect -re $kernel_prompt
            send_log "Throughput $expect_out(1,string)\n"
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

if { $board_type == "BF537-STAMP" || $board_type == "BF548-EZKIT" || [string match "BF527-EZKIT*" $board_type] } {
    if { $TransRate > 4000 && $Throughput > 85 } {
        case_pass $case_num
    } else {
        case_fail $case_num
    }
} elseif { $board_type == "BF533-STAMP" } {
    if { $TransRate > 3500 && $Throughput > 50 } {
        case_pass $case_num
    } else {
        case_fail $case_num
    }
} elseif { $board_type == "BF526-EZKIT" } {
    if { $TransRate > 3000 && $Throughput > 60 } {
        case_pass $case_num
    } else {
        case_fail $case_num
    }
} else {
    if { $TransRate > 2500 && $Throughput > 50 } {
        case_pass $case_num
    } else {
        case_fail $case_num
    }
}

set spawn_id $netserver_id
set timeout 3
send "pkill -9 netserver\r"
expect -re $sh_prompt

all_pass
send_user "Ending $argv0\n"
log_file
