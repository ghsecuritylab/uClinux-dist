http://trolltech.com/developer/task-tracker/index_html?id=239094&method=entry

--- /dev/null
+++ b/mkspecs/qws/linux-bfin-fdpic-g++/qmake.conf
@@ -0,0 +1,19 @@
+#
+# qmake configuration for linux-bfin-g++ (FDPIC)
+#
+
+include(../linux-generic-g++/qmake.conf)
+
+QMAKE_CC          = bfin-linux-uclibc-gcc
+QMAKE_CFLAGS     += -DQT_LINUX_NOMMU
+QMAKE_CXX         = bfin-linux-uclibc-g++
+QMAKE_CXXFLAGS   += -DQT_LINUX_NOMMU
+QMAKE_LINK        = bfin-linux-uclibc-g++
+QMAKE_LINK_SHLIB  = bfin-linux-uclibc-g++
+QMAKE_AR          = bfin-linux-uclibc-ar cqs
+QMAKE_RANLIB      = bfin-linux-uclibc-ranlib
+QMAKE_OBJCOPY     = bfin-linux-uclibc-objcopy
+QMAKE_STRIP       = bfin-linux-uclibc-strip
+CONFIG		  -= link_prl
+
+load(qt_config)
--- /dev/null
+++ b/mkspecs/qws/linux-bfin-fdpic-g++/qplatformdefs.h
@@ -0,0 +7 @@
+#include "../../linux-g++/qplatformdefs.h"
+
+/* Linux no-mmu cannot do MAP_SHARED */
+#if defined(QT_LINUX_NOMMU)
+# undef MAP_SHARED
+# define MAP_SHARED MAP_PRIVATE
+#endif
--- /dev/null
+++ b/mkspecs/qws/linux-bfin-flat-g++/qmake.conf
@@ -0,0 +1,21 @@
+#
+# qmake configuration for linux-bfin-g++ (FLAT)
+#
+
+include(../linux-generic-g++/qmake.conf)
+
+DEFINES          += QT_STATIC_PLUGIN
+QMAKE_CC          = bfin-uclinux-gcc
+QMAKE_CFLAGS     += -DQT_LINUX_NOMMU -DQT_STATIC_PLUGIN
+QMAKE_CXX         = bfin-uclinux-g++
+QMAKE_CXXFLAGS   += -DQT_LINUX_NOMMU -DQT_STATIC_PLUGIN
+QMAKE_LINK        = bfin-uclinux-g++
+QMAKE_LINK_SHLIB  = bfin-uclinux-g++
+QMAKE_LFLAGS     += -elf2flt
+QMAKE_AR          = bfin-uclinux-ar cqs
+QMAKE_RANLIB      = bfin-uclinux-ranlib
+QMAKE_OBJCOPY     = bfin-uclinux-objcopy
+QMAKE_STRIP       = bfin-uclinux-strip
+QMAKE_LIBS_DYNLOAD =
+CONFIG		  -= link_prl
+
+load(qt_config)
--- /dev/null
+++ b/mkspecs/qws/linux-bfin-flat-g++/qplatformdefs.h
@@ -0,0 +7 @@
+#include "../../linux-g++/qplatformdefs.h"
+
+/* Linux no-mmu cannot do MAP_SHARED */
+#if defined(QT_LINUX_NOMMU)
+# undef MAP_SHARED
+# define MAP_SHARED MAP_PRIVATE
+#endif
--- a/src/gui/painting/qblendfunctions.cpp
+++ b/src/gui/painting/qblendfunctions.cpp
@@ -335,7 +335,7 @@
         const uchar *src = srcPixels + y * sbpl;
         const uchar *srcEnd = src + srcOffset;
         while (src < srcEnd) {
-#if defined(QT_ARCH_ARM) || defined(QT_ARCH_POWERPC) || (defined(QT_ARCH_WINDOWSCE) && !defined(_X86_))
+#if defined(QT_ARCH_BFIN) || defined(QT_ARCH_ARM) || defined(QT_ARCH_POWERPC) || (defined(QT_ARCH_WINDOWSCE) && !defined(_X86_))
             // non-16-bit aligned memory access is not possible on PowerPC &
             // ARM <v6 (QT_ARCH_ARMV6)
             quint16 spix = (quint16(src[2])<<8) + src[1];
--- a/src/corelib/global/qglobal.h
+++ b/src/corelib/global/qglobal.h
@@ -1000,7 +1000,7 @@
 
 typedef int QNoImplicitBoolCast;
 
-#if defined(QT_ARCH_ARM) || defined(QT_ARCH_ARMV6) || defined(QT_ARCH_AVR32) || (defined(QT_ARCH_MIPS) && (defined(Q_WS_QWS) || defined(Q_OS_WINCE))) || defined(QT_ARCH_SH) || defined(QT_ARCH_SH4A)
+#if defined(QT_ARCH_ARM) || defined(QT_ARCH_ARMV6) || defined(QT_ARCH_AVR32) || (defined(QT_ARCH_MIPS) && (defined(Q_WS_QWS) || defined(Q_OS_WINCE))) || defined(QT_ARCH_SH) || defined(QT_ARCH_SH4A) || defined(QT_ARCH_BFIN)
 #define QT_NO_FPU
 #endif

--- a/src/corelib/io/qfilesystemwatcher_inotify.cpp
+++ b/src/corelib/io/qfilesystemwatcher_inotify.cpp
@@ -106,6 +106,10 @@
 # define __NR_inotify_init	240
 # define __NR_inotify_add_watch	241
 # define __NR_inotify_rm_watch	242
+#elif defined (__bfin__)
+# define __NR_inotify_init	316
+# define __NR_inotify_add_watch	317
+# define __NR_inotify_rm_watch	318
 #elif defined (__mc68000__)
 # define __NR_inotify_init      284
 # define __NR_inotify_add_watch 285
--- a/src/corelib/arch/bfin/arch.pri
+++ b/src/corelib/arch/bfin/arch.pri
@@ -1,3 +1,5 @@
 # 
 # Blackfin architecture
 #
+
+unix:SOURCES += qatomic_bfin_unix.cpp
--- a/src/corelib/arch/bfin/qatomic_bfin_unix.cpp
+++ b/src/corelib/arch/bfin/qatomic_bfin_unix.cpp
@@ -0,0 +1,125 @@
+/****************************************************************************
+**
+** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: Qt Software Information (qt-info@nokia.com)
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial Usage
+** Licensees holding valid Qt Commercial licenses may use this file in
+** accordance with the Qt Commercial License Agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Nokia.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain
+** additional rights. These rights are described in the Nokia Qt LGPL
+** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
+** package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+** If you are unsure which license is appropriate for your use, please
+** contact the sales department at qt-sales@nokia.com.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QATOMIC_BFIN_H
+#define QATOMIC_BFIN_H
+
+#include "qplatformdefs.h"
+
+#include <QtCore/qatomic.h>
+
+QT_BEGIN_INCLUDE_NAMESPACE
+#include <bfin_fixed_code.h>
+QT_END_INCLUDE_NAMESPACE
+
+Q_CORE_EXPORT
+bool QBasicAtomicInt_testAndSetOrdered(volatile int *_q_value, int expectedValue, int newValue)
+{
+    int oldValue = (int)bfin_atomic_cas32((uint32_t *)_q_value, expectedValue, newValue);
+    return oldValue == expectedValue ? true : false;
+}
+
+Q_CORE_EXPORT
+int QBasicAtomicInt_fetchAndStoreOrdered(volatile int *_q_value, int newValue)
+{
+    return bfin_atomic_xchg32((uint32_t *)_q_value, newValue);
+}
+
+Q_CORE_EXPORT
+int QBasicAtomicInt_fetchAndAddOrdered(volatile int *_q_value, int valueToAdd)
+{
+    /*return bfin_atomic_add32(_q_value, valueToAdd) - valueToAdd;*/
+    int oldValue;
+    __asm__ __volatile__(
+        "CALL (%[add32])"
+        : "=q1" (oldValue), "=m" (*_q_value), "+&q0" (valueToAdd)
+        : [add32] "a" (ATOMIC_ADD32), "qA" (_q_value), "m" (*_q_value)
+        : "RETS", "memory"
+    );
+    return oldValue;
+}
+
+Q_CORE_EXPORT
+bool QBasicAtomicPointer_testAndSetOrdered(void * volatile *_q_value,
+                                           void *expectedValue,
+                                           void *newValue)
+{
+    /*void *oldValue = (void *)bfin_atomic_cas32((uint32_t *)_q_value, expectedValue, newValue);*/
+    void *oldValue;
+    __asm__ __volatile__(
+        "CALL (%[cas32])"
+        : "=q0" (oldValue), "=m" (*_q_value)
+        : [cas32] "a" (ATOMIC_CAS32), "q1" (expectedValue), "q2" (newValue),
+          "qA" (_q_value), "m" (*_q_value)
+        : "RETS", "memory"
+    );
+    return oldValue == expectedValue ? true : false;
+}
+
+Q_CORE_EXPORT
+void *QBasicAtomicPointer_fetchAndStoreOrdered(void * volatile *_q_value, void *newValue)
+{
+    void *oldValue;
+    __asm__ __volatile__(
+        "CALL (%[xchg32])"
+        : "=q0" (oldValue), "=m" (*_q_value)
+        : [xchg32] "a" (ATOMIC_XCHG32), "q1" (newValue),
+          "qA" (_q_value), "m" (*_q_value)
+        : "RETS", "memory"
+    );
+    return oldValue;
+}
+
+Q_CORE_EXPORT
+void *QBasicAtomicPointer_fetchAndAddOrdered(void * volatile *_q_value, qptrdiff valueToAdd)
+{
+    /*return bfin_atomic_add32(_q_value, valueToAdd) - valueToAdd;*/
+    void *oldValue;
+    __asm__ __volatile__(
+        "CALL (%[add32])"
+        : "=q1" (oldValue), "=m" (*_q_value), "+&q0" (valueToAdd)
+        : [add32] "a" (ATOMIC_ADD32), "qA" (_q_value), "m" (*_q_value)
+        : "RETS", "memory"
+    );
+    return oldValue;
+}
+
+#endif
--- a/src/corelib/arch/qatomic_bfin.h
+++ b/src/corelib/arch/qatomic_bfin.h
@@ -1,343 +1 @@
-/****************************************************************************
-**
-** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: Qt Software Information (qt-info@nokia.com)
-**
-** This file is part of the QtCore module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial Usage
-** Licensees holding valid Qt Commercial licenses may use this file in
-** accordance with the Qt Commercial License Agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Nokia.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain
-** additional rights. These rights are described in the Nokia Qt LGPL
-** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
-** package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-** If you are unsure which license is appropriate for your use, please
-** contact the sales department at qt-sales@nokia.com.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QATOMIC_BFIN_H
-#define QATOMIC_BFIN_H
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-#define Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
-
-inline bool QBasicAtomicInt::isReferenceCountingNative()
-{ return false; }
-inline bool QBasicAtomicInt::isReferenceCountingWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
-
-inline bool QBasicAtomicInt::isTestAndSetNative()
-{ return false; }
-inline bool QBasicAtomicInt::isTestAndSetWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE
-
-inline bool QBasicAtomicInt::isFetchAndStoreNative()
-{ return false; }
-inline bool QBasicAtomicInt::isFetchAndStoreWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
-
-inline bool QBasicAtomicInt::isFetchAndAddNative()
-{ return false; }
-inline bool QBasicAtomicInt::isFetchAndAddWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isTestAndSetNative()
-{ return false; }
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isTestAndSetWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndStoreNative()
-{ return false; }
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndStoreWaitFree()
-{ return false; }
-
-#define Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddNative()
-{ return false; }
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
-{ return false; }
-
-#if defined(Q_OS_LINUX) && defined(Q_CC_GNU)
-
-QT_BEGIN_INCLUDE_NAMESPACE
-#include <asm/fixed_code.h>
-QT_END_INCLUDE_NAMESPACE
-
-inline bool QBasicAtomicInt::ref()
-{
-    int ret;
-    asm volatile("R0 = 1;\n\t"
-		 "P0 = %3;\n\t"
-                 "CALL (%2);\n\t"
-                 "%0 = R0;"
-                 : "=da" (ret), "=m" (_q_value)
-                 : "a" (ATOMIC_ADD32), "da" (&_q_value), "m" (_q_value)
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return ret != 0;
-}
-
-inline bool QBasicAtomicInt::deref()
-{
-    int ret;
-    asm volatile("R0 = 1;\n\t"
-		 "P0 = %3;\n\t"
-                 "CALL (%2);\n\t"
-                 "%0 = R0;"
-                 : "=da" (ret), "=m" (_q_value)
-                 : "a" (ATOMIC_SUB32), "da" (&_q_value), "m" (_q_value)
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return ret != 0;
-}
-
-inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
-{
-    long int readval;
-    asm volatile ("P0 = %2;\n\t"
-		  "R1 = %3;\n\t"
-		  "R2 = %4;\n\t"
-		  "CALL (%5);\n\t"
-		  "%0 = R0;\n\t"
-		  : "=da" (readval), "=m" (_q_value)
-		  : "da" (&_q_value),
-		  "da" (expectedValue),
-		  "da" (newValue),
-		  "a" (ATOMIC_CAS32),
-		  "m" (_q_value)
-		  : "P0", "R0", "R1", "R2", "RETS", "memory", "cc");
-    return readval == expectedValue;
-}
-
-inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
-{
-    asm volatile("R1 = %2;\n\t"
-		 "P0 = %4;\n\t"
-                 "CALL (%3);\n\t"
-                 "%0 = R0;"
-                 : "=da" (newValue), "=m" (_q_value)
-                 : "da" (newValue), "a" (ATOMIC_XCHG32), "da" (&_q_value), "m" (_q_value)
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return newValue;
-}
-
-inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
-{
-    int ret;
-    asm volatile("R0 = %[val];\n\t"
-		 "P0 = %[qvalp];\n\t"
-                 "CALL (%[addr]);\n\t"
-                 "%[ret] = R1;"
-                 : [ret] "=da" (ret), "=m" (_q_value)
-                 : [addr] "a" (ATOMIC_ADD32), [qvalp] "da" (&_q_value), "m" (_q_value), [val] "da" (valueToAdd)
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return ret;
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
-{
-    T *readval;
-    asm volatile ("P0 = %2;\n\t"
-		  "R1 = %3;\n\t"
-		  "R2 = %4;\n\t"
-		  "CALL (%5);\n\t"
-		  "%0 = R0;\n\t"
-		  : "=da" (readval), "=m" (_q_value)
-		  : "da" (&_q_value),
-		  "da" (expectedValue),
-		  "da" (newValue),
-		  "a" (ATOMIC_CAS32),
-		  "m" (_q_value)
-		  : "P0", "R0", "R1", "R2", "RETS", "memory", "cc");
-    return readval == expectedValue;
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
-{
-    asm volatile("R1 = %2;\n\t"
-		 "P0 = %4;\n\t"
-                 "CALL (%3);\n\t"
-                 "%0 = R0;"
-                 : "=da" (newValue), "=m" (_q_value)
-                 : "da" (newValue), "a" (ATOMIC_XCHG32), "da" (&_q_value), "m" (_q_value)
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return newValue;
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
-{
-    T* ret;
-    asm volatile("R0 = %[val];\n\t"
-		 "P0 = %[qvalp];\n\t"
-                 "CALL (%[addr]);\n\t"
-                 "%[ret] = R1;"
-                 : [ret] "=da" (ret), "=m" (_q_value)
-                 : [addr] "a" (ATOMIC_ADD32), [qvalp] "da" (&_q_value), "m" (_q_value), [val] "da" (valueToAdd * sizeof(T))
-                 : "R0", "R1", "P0", "RETS", "memory");
-    return ret;
-}
-
-
-#endif // Q_OS_LINUX && Q_CC_GNU
-
-// Test and set for integers
-
-inline bool QBasicAtomicInt::testAndSetRelaxed(int expectedValue, int newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-inline bool QBasicAtomicInt::testAndSetAcquire(int expectedValue, int newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-inline bool QBasicAtomicInt::testAndSetRelease(int expectedValue, int newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-// Fetch and store for integers
-
-inline int QBasicAtomicInt::fetchAndStoreRelaxed(int newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-inline int QBasicAtomicInt::fetchAndStoreAcquire(int newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-inline int QBasicAtomicInt::fetchAndStoreRelease(int newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-// Fetch and add for integers
-
-inline int QBasicAtomicInt::fetchAndAddRelaxed(int valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-inline int QBasicAtomicInt::fetchAndAddAcquire(int valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-inline int QBasicAtomicInt::fetchAndAddRelease(int valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-// Test and set for pointers
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetRelaxed(T *expectedValue, T *newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetAcquire(T *expectedValue, T *newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetRelease(T *expectedValue, T *newValue)
-{
-    return testAndSetOrdered(expectedValue, newValue);
-}
-
-// Fetch and store for pointers
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreRelaxed(T *newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreAcquire(T *newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreRelease(T *newValue)
-{
-    return fetchAndStoreOrdered(newValue);
-}
-
-// Fetch and add for pointers
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddRelaxed(qptrdiff valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddAcquire(qptrdiff valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-template <typename T>
-Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddRelease(qptrdiff valueToAdd)
-{
-    return fetchAndAddOrdered(valueToAdd);
-}
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QATOMIC_BFIN_H
+#include "qatomic_generic.h"
--- a/mkspecs/features/unix/dylib.prf	2009-08-11 09:59:17.000000000 +0800
+++ b/mkspecs/features/unix/dylib.prf	2009-08-11 09:58:58.000000000 +0800
@@ -1 +1,4 @@
+linux-bfin-flat-* {
+} else {
 LIBS += $$QMAKE_LIBS_DYNLOAD
+}
--- a/mkspecs/features/unix/x11.prf	2009-08-11 09:59:27.000000000 +0800
+++ b/mkspecs/features/unix/x11.prf	2009-08-11 09:58:58.000000000 +0800
@@ -1 +1,4 @@
+linux-bfin-* {
+} else {
 CONFIG *= x11lib x11inc
+}
--- a/mkspecs/features/unix/x11inc.prf	2009-08-11 09:59:40.000000000 +0800
+++ b/mkspecs/features/unix/x11inc.prf	2009-08-11 09:58:58.000000000 +0800
@@ -1,3 +1,6 @@
+linux-bfin-* {
+} else {
 INCLUDEPATH += $$QMAKE_INCDIR_X11
 QMAKE_CFLAGS += $$QMAKE_CFLAGS_X11
 QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_X11
+}
--- a/mkspecs/features/unix/x11lib.prf	2009-08-11 09:59:47.000000000 +0800
+++ b/mkspecs/features/unix/x11lib.prf	2009-08-11 09:58:58.000000000 +0800
@@ -1,2 +1,5 @@
+linux-bfin-* {
+} else {
 !isEmpty(QMAKE_LIBDIR_X11):QMAKE_LIBDIR += $$QMAKE_LIBDIR_X11
 LIBS += $$QMAKE_LIBS_X11
+}
--- a/mkspecs/features/unix/x11sm.prf	2009-08-11 09:59:53.000000000 +0800
+++ b/mkspecs/features/unix/x11sm.prf	2009-08-11 09:58:58.000000000 +0800
@@ -1,2 +1,5 @@
+linux-bfin-* {
+} else {
 !isEmpty(QMAKE_LIBDIR_X11):QMAKE_LIBDIR += $$QMAKE_LIBDIR_X11
 LIBS += $$QMAKE_LIBS_X11SM
+}
