--- e2fsprogs-libs-1.41.10/configure.in
+++ e2fsprogs-libs-1.41.10/configure.in
@@ -817,7 +817,7 @@
   AC_SEARCH_LIBS([blkid_probe_all], [blkid])
 fi
 dnl
-AC_CHECK_FUNCS(chflags getrusage llseek lseek64 open64 fstat64 ftruncate64 getmntinfo strtoull strcasecmp srandom jrand48 fchown mallinfo fdatasync strnlen strptime strdup sysconf pathconf posix_memalign memalign valloc __secure_getenv prctl mmap utime setresuid setresgid usleep nanosleep getdtablesize getrlimit blkid_probe_get_topology)
+AC_CHECK_FUNCS(chflags getrusage llseek lseek64 open64 fstat64 ftruncate64 getmntinfo strtoull strcasecmp srandom jrand48 fchown mallinfo fdatasync strnlen strptime strdup sysconf pathconf posix_memalign memalign valloc __secure_getenv prctl mmap utime setresuid setresgid usleep nanosleep getdtablesize getrlimit blkid_probe_get_topology fork daemon)
 dnl
 dnl Check to see if -lsocket is required (solaris) to make something
 dnl that uses socket() to compile; this is needed for the UUID library
--- e2fsprogs-libs-1.41.10/configure
+++ e2fsprogs-libs-1.41.10/configure
@@ -10599,7 +10599,7 @@
 fi
 
 fi
-for ac_func in chflags getrusage llseek lseek64 open64 fstat64 ftruncate64 getmntinfo strtoull strcasecmp srandom jrand48 fchown mallinfo fdatasync strnlen strptime strdup sysconf pathconf posix_memalign memalign valloc __secure_getenv prctl mmap utime setresuid setresgid usleep nanosleep getdtablesize getrlimit blkid_probe_get_topology
+for ac_func in chflags getrusage llseek lseek64 open64 fstat64 ftruncate64 getmntinfo strtoull strcasecmp srandom jrand48 fchown mallinfo fdatasync strnlen strptime strdup sysconf pathconf posix_memalign memalign valloc __secure_getenv prctl mmap utime setresuid setresgid usleep nanosleep getdtablesize getrlimit blkid_probe_get_topology fork daemon
 do :
   as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
 ac_fn_c_check_func "$LINENO" "$ac_func" "$as_ac_var"
--- e2fsprogs-1.41.10/lib/ss/help.c
+++ e2fsprogs-1.41.10/lib/ss/help.c
@@ -106,7 +106,11 @@ void ss_help (argc, argv, sci_idx, info_
 	free(buf);
 	return;
     }
+#ifdef HAVE_FORK
     switch (child = fork()) {
+#else
+    switch (child = vfork()) {
+#endif
     case -1:
 	ss_perror(sci_idx, errno, "Can't fork for pager");
 	return;
--- e2fsprogs-1.41.10/lib/ss/list_rqs.c
+++ e2fsprogs-1.41.10/lib/ss/list_rqs.c
@@ -35,7 +35,7 @@ void ss_list_requests(int argc __SS_ATTR
     int fd;
     sigset_t omask, igmask;
     sigret_t (*func)(int);
-#ifndef NO_FORK
+#ifdef HAVE_FORK
     int waitb;
 #endif
 
@@ -78,7 +78,7 @@ void ss_list_requests(int argc __SS_ATTR
         }
     }
     fclose(output);
-#ifndef NO_FORK
+#ifdef HAVE_FORK
     wait(&waitb);
 #endif
     (void) signal(SIGINT, func);
--- e2fsprogs-1.41.10/lib/ss/pager.c
+++ e2fsprogs-1.41.10/lib/ss/pager.c
@@ -62,6 +62,14 @@ char *ss_safe_getenv(const char *arg)
 #endif
 }
 
+#ifdef HAVE_FORK
+# define do_fork()  fork()
+# define do_exit(x) exit(x)
+#else
+# define do_fork()  vfork()
+# define do_exit(x) _exit(x)
+#endif
+
 /*
  * this needs a *lot* of work....
  *
@@ -70,7 +78,6 @@ char *ss_safe_getenv(const char *arg)
  * allow finer control -- put-page-break-here
  */
 
-#ifndef NO_FORK
 int ss_pager_create(void)
 {
 	int filedes[2];
@@ -78,7 +85,7 @@ int ss_pager_create(void)
 	if (pipe(filedes) != 0)
 		return(-1);
 
-	switch(fork()) {
+	switch(do_fork()) {
 	case -1:
 		return(-1);
 	case 0:
@@ -86,7 +93,7 @@ int ss_pager_create(void)
 		 * Child; dup read half to 0, close all but 0, 1, and 2
 		 */
 		if (dup2(filedes[0], 0) == -1)
-			exit(1);
+			do_exit(1);
 		ss_page_stdin();
 	default:
 		/*
@@ -97,14 +104,6 @@ int ss_pager_create(void)
 		return(filedes[1]);
 	}
 }
-#else /* don't fork */
-int ss_pager_create()
-{
-    int fd;
-    fd = open("/dev/tty", O_WRONLY, 0);
-    return fd;
-}
-#endif
 
 static int write_all(int fd, char *buf, size_t count)
 {
@@ -148,5 +147,5 @@ void ss_page_stdin()
 		while ((n = read(0, buf, 80)) > 0)
 			write_all(1, buf, n);
 	}
-	exit(errno);
+	do_exit(errno);
 }
--- e2fsprogs-1.41.10/lib/uuid/gen_uuid.c
+++ e2fsprogs-1.41.10/lib/uuid/gen_uuid.c
@@ -467,7 +467,7 @@ static void close_all_fds(void)
  */
 static int get_uuid_via_daemon(int op, uuid_t out, int *num)
 {
-#if defined(USE_UUIDD) && defined(HAVE_SYS_UN_H)
+#if defined(USE_UUIDD) && defined(HAVE_SYS_UN_H) && defined(HAVE_FORK)
 	char op_buf[64];
 	int op_len;
 	int s;
--- e2fsprogs-1.41.10/misc/fsck.c
+++ e2fsprogs-1.41.10/misc/fsck.c
@@ -490,7 +490,11 @@ static int execute(const char *type, con
 	/* Fork and execute the correct program. */
 	if (noexecute)
 		pid = -1;
+#ifdef HAVE_FORK
 	else if ((pid = fork()) < 0) {
+#else
+	else if ((pid = vfork()) < 0) {
+#endif
 		perror("fork");
 		free(inst);
 		return errno;
@@ -500,7 +504,11 @@ static int execute(const char *type, con
 		(void) execv(s, argv);
 		perror(argv[0]);
 		free(inst);
+#ifdef HAVE_FORK
 		exit(EXIT_ERROR);
+#else
+		_exit(EXIT_ERROR);
+#endif
 	}
 
 	for (i=0; i < argc; i++)
@@ -640,11 +648,15 @@ static struct fsck_instance *wait_one(in
 			 * time to set up the signal handler
 			 */
 			if (inst2->start_time < time(0)+2) {
+#ifdef HAVE_FORK
 				if (fork() == 0) {
+#endif
 					sleep(1);
 					kill(inst2->pid, SIGUSR1);
+#ifdef HAVE_FORK
 					exit(0);
 				}
+#endif
 			} else
 				kill(inst2->pid, SIGUSR1);
 			inst2->flags |= FLAG_PROGRESS;
--- e2fsprogs-1.41.10/misc/logsave.c
+++ e2fsprogs-1.41.10/misc/logsave.c
@@ -161,7 +161,11 @@ static int run_program(char **argv)
 #endif
 #endif
 
+#ifdef HAVE_FORK
 	pid = fork();
+#else
+	pid = vfork();
+#endif
 	if (pid < 0) {
 		perror("vfork");
 		exit(1);
@@ -173,7 +177,11 @@ static int run_program(char **argv)
 
 		execvp(argv[0], argv);
 		perror(argv[0]);
+#ifdef HAVE_FORK
 		exit(1);
+#else
+		_exit(1);
+#endif
 	}
 	child_pid = pid;
 	close(fds[1]);
@@ -287,11 +295,15 @@ int main(int argc, char **argv)
 	send_output("----------------\n", 0, send_flag);
 
 	if (outbuf) {
+#ifdef HAVE_FORK
 		pid = fork();
 		if (pid < 0) {
 			perror("fork");
 			exit(1);
 		}
+#else
+		pid = 0;
+#endif
 		if (pid) {
 			if (verbose)
 				printf("Backgrounding to save %s later\n",
--- e2fsprogs-1.41.10/misc/uuidd.c
+++ e2fsprogs-1.41.10/misc/uuidd.c
@@ -60,8 +60,9 @@ static void die(const char *msg)
 
 static void create_daemon(void)
 {
-	pid_t pid;
 	uid_t euid;
+#ifndef HAVE_DAEMON
+	pid_t pid;
 
 	pid = fork();
 	if (pid == -1) {
@@ -80,6 +81,9 @@ static void create_daemon(void)
 
 	if (chdir("/")) {}	/* Silence warn_unused_result warning */
 	(void) setsid();
+#else
+	daemon(0, 0);
+#endif
 	euid = geteuid();
 	if (setreuid(euid, euid) < 0)
 		die("setreuid");
